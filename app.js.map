{"version":3,"sources":["app/common.js","app/game.js","app/generator.js","app/main.js","app/solver.js","app/ui.js"],"names":["GridStateEnum","Object","freeze","Question","Unknown","Flag","N0","N1","N2","N3","N4","N5","N6","N7","N8","MineRevealed","MineClicked","WrongFlag","GameState","height","width","mines","seed","w","h","n","dead","won","grid","y","x","Error","generate","emit","queue","push","q","length","xx","yy","v","dx","dy","nmines","ncovered","ClassicGenerator","ret","memset","rng","uint32_range","tmp","k","i","j","Math","abs","nn","FairGenerator","success","ntries","solver","solveret","prevret","state","open","solve","len","window","renderer","document","getElementsByClassName","addEventListener","init","Solver","sx","sy","allow_big_perturbs","GameWindow","root","indicators","onmousedown","bind","onmouseup","onmousemove","_x_last","_y_last","redraw_anim","e","preventDefault","onkeypress","_grid","on","onstart","onend","firstChild","removeChild","row","createElement","className","tile","dataset","coord","appendChild","indicator_flags","_flags_remain","indicator_yellow","indicator_clock","time_start","time_stop","_chord_last","_draw_queue","_anim_queue","requestAnimationFrame","textContent","Date","now","tick","win","classList","remove","add","redraw_full","target","indexOf","xy","split","parseInt","button","buttons","ctrlKey","_flag","replace","_chord","_open","path","code","redraw","dt","padStart","setAttribute","rv"],"mappings":"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","file":"public/app.js","sourcesContent":["export const GridStateEnum = Object.freeze({\n    Question: -3, // unused\n    Unknown: -2,\n    Flag: -1,\n\n    N0: 0,\n    N1: 1,\n    N2: 2,\n    N3: 3,\n    N4: 4,\n    N5: 5,\n    N6: 6,\n    N7: 7,\n    N8: 8,\n\n    MineRevealed: 64,\n    MineClicked: 65,\n    WrongFlag: 66,\n})\n\n/**\n * Valid RNG for minefield generators\n * @interface RNG\n */\n/**\n * Generate random number in [0,max)\n * @function\n * @name RNG#uint32_range\n * @param {max} End of range, exclusive.\n * @returns {number} A random integer in the specified range\n */\n","import Emitter from '../lib/emitter'\n\nimport {GridStateEnum as gse} from 'common'\nimport {ClassicGenerator} from 'generator'\n\n/**\n * Game engine class, containing decoupled game logic.\n *\n * @class\n * @extends Emitter\n * @property {number} w - Width of minefield\n * @property {number} h - Height of minefield\n * @property {number} n - Number of mines\n * @property {RNG | string | number | null} seed - RNG or seed used to create minefield\n * @property {boolean} dead - Player is dead\n * @property {boolean} won - Player has won\n *\n * @property {Array<number>} mines - Map of mine locations. Don't cheat!\n * @property {Array<number>} grid - Game state grid\n */\nexport class GameState extends Emitter {\n    constructor(height = 16, width = 30, mines = 99, seed = null) {\n        super()\n\n        this.w = width\n        this.h = height\n        this.n = mines\n        this.seed = seed\n        this.dead = false\n        this.won = false\n\n        this.mines = null\n        this.grid = []\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++)\n                this.grid[y * width + x] = -2\n        }\n    }\n\n    /**\n     * Uncover a square in the minefield.\n     *\n     * @param x - X coordinate to open, from left\n     * @param y - Y coordinate to open, from top\n     * @returns {boolean} Game is still ongoing\n     */\n    open(x, y) {\n        const w = this.w, h = this.h\n        if (!(0 <= x && x < w) || !(0 <= y && y < h))\n            throw new Error('coordinate(s) out of range')\n\n        if (this.mines == null) {\n            /*\n\t         * We have a preliminary game in which the mine layout\n\t         * hasn't been generated yet. Generate it based on the\n\t         * initial click location.\n\t         */\n            this.mines = ClassicGenerator.generate(h, w, this.n, x, y, this.seed)\n            this.emit('start')\n        }\n\n        if (this.mines[y * w + x]) {\n            /*\n\t         * The player has landed on a mine. Bad luck. Expose the\n\t         * mine that killed them, but not the rest (in case they\n\t         * want to Undo and carry on playing).\n\t         */\n            this.dead = true\n            this.grid[y * w + x] = gse.MineClicked\n            this.emit('end', false)\n            return false\n        }\n\n        /*\n         * Otherwise, the player has opened a safe square. Mark it to-do.\n         */\n        const queue = []\n        //this.grid[y * w + x] = -10 /* queue value internal to this func */\n        queue.push({x, y})\n\n        /*\n         * Now go through the queue and open the squares.\n         * Every time one of them turns out to have no\n         * neighbouring mines, we add all its unopened neighbours to\n         * the list as well.\n         *\n         * Different from the best-case(!) O(N²) in the original.\n         */\n        for (let q = 0; q < queue.length; q++) {\n            const {x: xx, y: yy} = queue[q]\n\n            if (this.mines[yy * w + xx])\n                throw new Error('tried to auto-clear a mine')\n\n            let v = 0\n\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (xx + dx >= 0 && xx + dx < w\n                        && yy + dy >= 0 && yy + dy < h\n                        && this.mines[(yy + dy) * w + (xx + dx)])\n                        v++\n                }\n            }\n\n            this.grid[yy * w + xx] = v\n\n            if (v === 0) {\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (xx + dx >= 0 && xx + dx < w\n                            && yy + dy >= 0 && yy + dy < h\n                            && this.grid[(yy + dy) * w + (xx + dx)] === gse.Unknown)\n                            queue.push({x: xx + dx, y: yy + dy})\n                    }\n                }\n            }\n        }\n\n        /*\n         * Finally, scan the grid and see if exactly as many squares\n         * are still covered as there are mines. If so, set the `won'\n         * flag and fill in mine markers on all covered squares.\n         */\n        let nmines = 0, ncovered = 0\n        for (let yy = 0; yy < h; yy++) {\n            for (let xx = 0; xx < w; xx++) {\n                if (this.grid[yy * w + xx] < 0)\n                    ncovered++\n                if (this.mines[yy * w + xx])\n                    nmines++\n            }\n        }\n        if (ncovered < nmines)\n            throw new Error('uncovered a mine without losing?')\n        if (ncovered === nmines) {\n            for (let yy = 0; yy < h; yy++) {\n                for (let xx = 0; xx < w; xx++) {\n                    if (this.grid[yy * w + xx] < 0)\n                        this.grid[yy * w + xx] = gse.Flag\n                }\n            }\n            this.won = true\n            this.emit('end', true)\n            return false\n        }\n\n        return true\n    }\n}\n","import xor4096 from '../lib/xor4096'\nimport {Solver} from 'solver'\n\n/**\n * Interface for classes that generate minefields\n *\n * @interface MinefieldGenerator\n */\n/**\n * Generate a new minefield with the given parameters.\n *\n * @function\n * @static\n * @name MinefieldGenerator#generate\n * @param {number} height Height of minefield.\n * @param {number} width - Width of minefield.\n * @param {number} mines - Number of mines.\n * @param {number} x - First click x-coordinate (to avoid immediate mine).\n * @param {number} y - First click y-coordinate (to avoid immediate mine).\n * @param {RNG | string | number} [seed] - Seed for generating minefield.\n * @returns {Array<number>} An array containing the minefield.\n */\n\n/**\n * Generates classic MS minefields.\n * Based on Simon Tatham's https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (mines > (width * height - 9))\n            throw new Error('too many mines for grid size')\n        const ret = memset(0, width * height)\n        const rng = (seed == null || seed.uint32_range == null) ? xor4096(seed) : seed\n\n        /*\n\t     * Start by placing n mines, none of which is at x,y or within\n\t     * one square of it.\n\t     */\n        const tmp = memset(0, width * height)\n\n        /*\n\t     * Write down the list of possible mine locations.\n\t     */\n        let k = 0\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (Math.abs(i - y) > 1 || Math.abs(j - x) > 1)\n                    tmp[k++] = i * width + j\n            }\n        }\n\n        /*\n         * Now pick n off the list at random.\n         */\n        let nn = mines\n        while (nn-- > 0) {\n            const i = rng.uint32_range(k)\n            ret[tmp[i]] = 1\n            tmp[i] = tmp[--k]\n        }\n\n        return ret\n    }\n}\n\n/**\n * Generates fair minefields without guessing, using Simon Tathams solver.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class FairGenerator extends ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (width <= 2 || height <= 2)\n            throw new Error('grid dimensions must be at least 3x3')\n        const rng = typeof seed !== 'object' ? xor4096(seed) : seed\n\n        let ret, success, ntries = 0\n        do {\n            success = false\n            ntries++\n\n            ret = super.generate(height, width, mines, x, y, rng)\n\n            /*\n\t         * Now set up a results grid to run the solver in, and a\n\t         * context for the solver to open squares. Then run the solver\n\t         * repeatedly; if the number of perturb steps ever goes up or\n\t         * it ever returns -1, give up completely.\n             */\n            const solver = new Solver(\n                ret, width, height, mines, x, y, rng, ntries > 100)\n            let solveret, prevret = -2 // FIXME tf is going on with prevret\n            for (;;) {\n                solver.state = memset(-2, width * height)\n                solver.state[y * width + x] = solver.open(x, y)\n                if (solver.state[y * width + x] !== 0)\n                    throw new Error('Generation broken, first square not empty')\n                solveret = solver.solve()\n                if (solveret < 0 || (prevret >= 0 && solveret >= prevret)) {\n                    success = false\n                    break\n                } else if (solveret === 0) {\n                    success = true\n                    break\n                }\n            }\n        } while (!success)\n\n        return ret\n    }\n}\n\nfunction memset(n, len) {\n    const ret = []\n    for (let i = 0; i < len; i++)\n        ret[i] = n\n    return ret\n}\n","//import '../lib/vendor/onresize'\nimport '../lib/dragable' // FIXME: side effect import for html, make this better later\nimport {GameState} from 'game'\nimport {GameWindow} from 'ui'\n\n// TODO Make this a real application\nwindow.renderer = new GameWindow(document.getElementsByClassName('minefield')[0],\n    new GameState(16, 30, 99), document.getElementsByClassName('indicator'))\ndocument.getElementsByClassName('yellow')[0].addEventListener('click',\n    () => window.renderer.init(null, new GameState(16, 30, 99), null))\n","class Solver {\n    constructor(grid, w, h, n, sx, sy, rng, allow_big_perturbs) {\n        this.grid = grid\n        this.w = w\n        this.h = h\n        this.n = n\n        this.state = []\n        this.sx = sx\n        this.sy = sy\n        this.rng = rng\n        this.allow_big_perturbs = allow_big_perturbs\n    }\n\n    open(x, y) {\n        if (!(x >= 0 && x < this.w && y >= 0 && y < this.h))\n            throw new Error('coordinates out of range')\n        if (this.grid[y * this.w + x])\n            return -1 /* *bang* */\n\n        let n = 0\n        for (let i = -1; i <= +1; i++) {\n            if (x + i < 0 || x + i >= this.w)\n                continue\n            for (let j = -1; j <= +1; j++) {\n                if (y + j < 0 || y + j >= this.h)\n                    continue\n                if (i === 0 && j === 0)\n                    continue\n                if (this.grid[(y + j) * this.w + (x + i)])\n                    n++\n            }\n        }\n\n        return n\n    }\n\n    solve() {\n        return 0 // TODO FIXME\n    }\n}\n\nexport {Solver}\n","import {GridStateEnum as gse} from 'common'\n\n/** Game window class, containing controls separated from rules. */\nexport class GameWindow {\n    /**\n     * @param root HTMLElement - root element to bind game field\n     * @param state GameState - game state object to render\n     * @param indicators Array<HTMLElement> - auxiliary indicators\n     */\n    constructor(root, state, indicators) {\n        this.init(root, state, indicators)\n\n        // TODO make these removeable for cleanup\n        root.addEventListener('mousedown', this.onmousedown.bind(this))\n        root.addEventListener('mouseup', this.onmouseup.bind(this))\n        root.addEventListener('mousemove', this.onmousemove.bind(this))\n        root.addEventListener('mouseleave', () => {\n            this._x_last = null\n            this._y_last = null\n            this.redraw_anim()\n        })\n        root.addEventListener('contextmenu', e => e.preventDefault())\n        document.addEventListener('keypress', this.onkeypress.bind(this))\n    }\n    init(root, state, indicators) {\n        this.root = root || this.root\n        this.state = state || this.state\n        this._grid = []\n\n        this.state.on('start', this.onstart.bind(this))\n        this.state.on('end', this.onend.bind(this))\n\n        while (this.root.firstChild)\n            this.root.removeChild(this.root.firstChild)\n        for (let h = 0; h < state.h; h++) {\n            const row = document.createElement('div')\n            row.className = 'row'\n            for (let w = 0; w < state.w; w++) {\n                const tile = document.createElement('div')\n                tile.className = 'tile closed'\n                tile.dataset.coord = '' + w + 'x' + h\n                this._grid[h * state.w + w] = tile\n                row.appendChild(tile)\n            }\n            this.root.appendChild(row)\n        }\n\n        this.indicator_flags = indicators ? indicators[0] : this.indicator_flags\n        this._flags_remain = null\n        this.indicator_yellow = indicators ? indicators[1] : this.indicator_yellow\n        this.indicator_yellow.className = 'indicator yellow happy'\n        this.indicator_clock = indicators ? indicators[2] : this.indicator_clock\n        this.time_start = null\n        this.time_stop = null\n\n        this._chord_last = null\n        this._x_last = null\n        this._y_last = null\n        this._draw_queue = []\n        this._anim_queue = []\n\n        requestAnimationFrame(() => {\n            this.indicator_flags.textContent = '!!!'\n            this.indicator_clock.textContent = '!!!'\n        })\n    }\n    destroy() {\n        // FIXME not removable\n        /*this.root.removeEventListener('mousedown', this.mousedown)\n        this.root.removeEventListener('mouseup', this.mouseup)\n        this.root.removeEventListener('mousemove', this.mousemove)*/\n        this.root = null\n        this.state = null\n        this._grid = null\n        this.time_start = null // kills the tick loop\n    }\n\n    onstart() {\n        this.time_start = Date.now()\n        this._flags_remain = this.state.n\n        requestAnimationFrame(() => this.tick())\n    }\n\n    onend(win) {\n        this.time_stop = Date.now()\n        if (win) {\n            // full reveal, flag remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i] && this.state.grid[i] === gse.Unknown)\n                    this.state.grid[i] = gse.Flag\n            }\n        } else {\n            // full reveal, show remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i]) {\n                    if (this.state.grid[i] === gse.Unknown)\n                        this.state.grid[i] = gse.MineRevealed\n                } else if (this.state.grid[i] === gse.Flag) {\n                    this.state.grid[i] = gse.WrongFlag\n                }\n            }\n        }\n        requestAnimationFrame(() => {\n            this.indicator_yellow.classList.remove('surprise', 'happy')\n            this.indicator_yellow.classList.add(win ? 'cool' : 'dead')\n            this.redraw_full()\n        })\n    }\n    \n    onmousedown(e) {\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n\n        if (e.button === 2 && e.buttons === 2 || e.button === 0 && e.ctrlKey) {\n            // right button (or left+ctrl), triggers early\n            this._flag(x, y)\n        } else if (e.button === 0 && e.buttons === 1) {\n            // anim click\n            requestAnimationFrame(() => {\n                if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n                    this._grid[y * this.state.w + x].className = 'tile open'\n                    this._anim_queue.push(y * this.state.w + x)\n                }\n                this.indicator_yellow.classList.replace('happy', 'surprise')\n            })\n        } else if (e.button === 2 && (e.buttons & 1) || e.button === 0 && (e.buttons & 2)) {\n            this._chord_last = null\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (x + dx >= 0 && x + dx < w\n                            && y + dy >= 0 && y + dy < h\n                            && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                            this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                            this._anim_queue.push((y + dy) * w + (x + dx))\n                        }\n                    }\n                }\n            })\n        }\n\n        e.preventDefault()\n    }\n\n    onmouseup(e) {\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n        const i = y * this.state.w + x\n\n        if (e.button === 0 && (e.buttons & 2) || e.button === 2 && (e.buttons & 1) || e.button === 1) {\n            // left+right button or middle button\n            this._chord(x, y)\n            if (!(this.state.won || this.state.dead)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.className = 'indicator yellow happy'\n                    this.redraw_anim()\n                })\n            }\n        } else if (e.button === 0 && !e.ctrlKey && !this._chord_last) {\n            // left button\n            if (this._open(x, y)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.className = 'indicator yellow happy'\n                    this.redraw_anim()\n                })\n            }\n        }\n\n        // log last click if multiple buttons pressed for chord\n        // compatible with 1.5 click strategy, but not in other direction\n        if ((e.buttons & 1) && e.button === 2)\n            this._chord_last = true\n        else\n            this._chord_last = null\n        e.preventDefault()\n    }\n\n    onmousemove(e) {\n        if (e.path[0].className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.path[0].dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n        if (this._x_last === x && this._y_last === y)\n            return\n        this._x_last = x\n        this._y_last = y\n\n        if (e.buttons !== 0 && !this._chord_last) {\n            // Animate squares on press and hold etc.\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                this.redraw_anim()\n                if ((e.buttons & 3) === 3) {\n                    for (let dx = -1; dx <= +1; dx++) {\n                        for (let dy = -1; dy <= +1; dy++) {\n                            if (x + dx >= 0 && x + dx < w\n                                && y + dy >= 0 && y + dy < h\n                                && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                                this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                                this._anim_queue.push((y + dy) * w + (x + dx))\n                            }\n                        }\n                    }\n                } else if (e.buttons & 1) {\n                    if (this.state.grid[y * w + x] === gse.Unknown) {\n                        this._grid[y * w + x].className = 'tile open'\n                        this._anim_queue.push(y * w + x)\n                    }\n                }\n            })\n        }\n    }\n\n    onkeypress(e) {\n        if (this.state.won || this.state.dead)\n            return\n        if (e.code === 'Space' && this._x_last != null && this._y_last != null) {\n            const i = this._y_last * this.state.w + this._x_last\n            if (this.state.grid[i] === gse.Unknown || this.state.grid[i] === gse.Flag)\n                this._flag(this._x_last, this._y_last)\n            else if (1 <= this.state.grid[i] && this.state.grid[i] <= 8)\n                this._chord(this._x_last, this._y_last)\n            e.preventDefault()\n        }\n    }\n\n    redraw_full() {\n        //this.tick()\n        for (let y = 0; y < this.state.h; y++) {\n            for (let x = 0; x < this.state.w; x++)\n                this.redraw(y * this.state.w + x)\n        }\n    }\n\n    redraw_anim() {\n        for (let i of this._anim_queue)\n            this.redraw(i)\n    }\n\n    redraw(i) {\n        switch (this.state.grid[i]) {\n        case gse.Unknown:\n            this._grid[i].className = 'tile closed'\n            break\n        case gse.Flag:\n            this._grid[i].className = 'tile closed flag'\n            break\n        case gse.MineRevealed:\n            this._grid[i].className = 'tile closed mine'\n            break\n        case gse.MineClicked:\n            this._grid[i].className = 'tile open red mine'\n            break\n        case gse.WrongFlag:\n            this._grid[i].className = 'tile closed nomine'\n            break\n        default:\n            this._grid[i].className = 'tile open n' + this.state.grid[i]\n            break\n        }\n    }\n\n    tick() {\n        const dt = (this.time_stop || Date.now()) - this.time_start\n        // MS sweeper starts clock at 1\n        this.indicator_clock.textContent = ('' + (~~(dt / 1000) + 1)).padStart(3, '0')\n        if (this.time_stop != null)\n            this.indicator_clock.setAttribute('title', `${~~(dt / 60000)}:${(dt / 1000) % 60}`)\n\n        //this.indicator_flags = this.state.grid.reduce((a, v) => a - (v === gse.Flag), this.state.n)\n        this.indicator_flags.textContent = ('' + this._flags_remain).padStart(3, '0')\n\n        for (const i of this._draw_queue)\n            this.redraw(i)\n\n        if (this.time_stop == null && this.time_start != null)\n            requestAnimationFrame(() => this.tick())\n    }\n\n    _open(x, y) {\n        if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n            const rv = this.state.open(x, y)\n            requestAnimationFrame(() => this.redraw_full())\n            return rv\n        }\n        return true\n    }\n\n    _flag(x, y) {\n        const i = y * this.state.w + x\n        if (this.time_start == null)\n            return\n        if (this.state.grid[i] === gse.Unknown) {\n            this.state.grid[i] = gse.Flag\n            this._draw_queue.push(i)\n            this._flags_remain -= 1\n        } else if (this.state.grid[i] === gse.Flag) {\n            this.state.grid[i] = gse.Unknown\n            this._draw_queue.push(i)\n            this._flags_remain += 1\n        }\n    }\n\n    _chord(x, y) {\n        const w = this.state.w, h = this.state.h\n        const i = y * w + x\n        if (this.time_start == null || !(1 <= this.state.grid[i] && this.state.grid[i] <= 8))\n            return\n\n        let v = 0\n        for (let dx = -1; dx <= +1; dx++) {\n            for (let dy = -1; dy <= +1; dy++) {\n                if (x + dx >= 0 && x + dx < w\n                    && y + dy >= 0 && y + dy < h\n                    && this.state.grid[(y + dy) * w + (x + dx)] === gse.Flag)\n                    v++\n            }\n        }\n\n        if (v === this.state.grid[i]) {\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (x + dx >= 0 && x + dx < w\n                        && y + dy >= 0 && y + dy < h\n                        && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown)\n                        this.state.open(x + dx, y + dy)\n                }\n            }\n        }\n\n        requestAnimationFrame(() => this.redraw_full())\n    }\n}\n"]}