{"version":3,"sources":["app/common.js","app/engine.js","app/gameui.js","app/generator.js","app/main.js","app/solver.js"],"names":["GridStateEnum","Object","freeze","Question","Unknown","Flag","N0","N1","N2","N3","N4","N5","N6","N7","N8","MineRevealed","MineClicked","WrongFlag","GameState","height","width","mines","seed","w","h","n","dead","won","grid","y","x","Error","generate","emit","queue","push","q","length","xx","yy","v","dx","dy","nmines","ncovered","GameWindow","root","state","indicators","active","init","addEventListener","onmousedown","bind","onmouseup","onmousemove","_x_last","_y_last","redraw_anim","e","preventDefault","document","onkeypress","reset","_grid","on","onstart","onend","firstChild","removeChild","row","createElement","className","tile","dataset","coord","appendChild","indicator_flags","classList","add","_flags_remain","indicator_yellow","indicator_clock","time_start","time_stop","_chord_last","_draw_queue","_anim_queue","requestAnimationFrame","textContent","Date","now","tick","win","i","remove","redraw_full","target","indexOf","xy","split","parseInt","button","buttons","ctrlKey","_flag","replace","_chord","_open","path","code","redraw","dt","padStart","setAttribute","rv","open","ClassicGenerator","ret","memset","rng","uint32_range","tmp","k","j","Math","abs","nn","FairGenerator","success","ntries","solver","solveret","prevret","solve","len","DIFFICULTIES","beg","int","exp","ext","Settings","cb","initial","getElementById","click","change","update","name","mode","value","difficulty","assign","id","close","type","checked","style","visibility","Manager","wmain","wroom","room_state","admin","settings","wsettings","settings_set","bsettings","label_set","main","querySelector","getElementsByClassName","querySelectorAll","mfw","mf","addResizeListener","main_resize","scale","max","min","offsetWidth","scrollWidth","offsetHeight","scrollHeight","transform","l","nonuser","window","manager","Solver","sx","sy","allow_big_perturbs"],"mappings":"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","file":"public/app.js","sourcesContent":["export const GridStateEnum = Object.freeze({\n    Question: -3, // unused\n    Unknown: -2,\n    Flag: -1,\n\n    N0: 0,\n    N1: 1,\n    N2: 2,\n    N3: 3,\n    N4: 4,\n    N5: 5,\n    N6: 6,\n    N7: 7,\n    N8: 8,\n\n    MineRevealed: 64,\n    MineClicked: 65,\n    WrongFlag: 66,\n})\n\n/**\n * Valid RNG for minefield generators\n * @interface RNG\n */\n/**\n * Generate random number in [0,max)\n * @function\n * @name RNG#uint32_range\n * @param {max} End of range, exclusive.\n * @returns {number} A random integer in the specified range\n */\n","import Emitter from '../lib/emitter'\n\nimport {GridStateEnum as gse} from 'common'\nimport {ClassicGenerator} from 'generator'\n\n/**\n * Game engine class, containing decoupled game logic.\n *\n * @class\n * @extends Emitter\n * @property {number} w - Width of minefield\n * @property {number} h - Height of minefield\n * @property {number} n - Number of mines\n * @property {RNG | string | number | null} seed - RNG or seed used to create minefield\n * @property {boolean} dead - Player is dead\n * @property {boolean} won - Player has won\n *\n * @property {Array<number>} mines - Map of mine locations. Don't cheat!\n * @property {Array<number>} grid - Game state grid\n */\nexport class GameState extends Emitter {\n    constructor(height = 16, width = 30, mines = 99, seed = null) {\n        super()\n\n        this.w = width\n        this.h = height\n        this.n = mines\n        this.seed = seed\n        this.dead = false\n        this.won = false\n\n        this.mines = null\n        this.grid = []\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++)\n                this.grid[y * width + x] = -2\n        }\n    }\n\n    /**\n     * Uncover a square in the minefield.\n     *\n     * @param x - X coordinate to open, from left\n     * @param y - Y coordinate to open, from top\n     * @returns {boolean} Game is still ongoing\n     */\n    open(x, y) {\n        const w = this.w, h = this.h\n        if (!(0 <= x && x < w) || !(0 <= y && y < h))\n            throw new Error('coordinate(s) out of range')\n\n        if (this.mines == null) {\n            /*\n\t         * We have a preliminary game in which the mine layout\n\t         * hasn't been generated yet. Generate it based on the\n\t         * initial click location.\n\t         */\n            this.mines = ClassicGenerator.generate(h, w, this.n, x, y, this.seed)\n            this.emit('start')\n        }\n\n        if (this.mines[y * w + x]) {\n            /*\n\t         * The player has landed on a mine. Bad luck. Expose the\n\t         * mine that killed them, but not the rest (in case they\n\t         * want to Undo and carry on playing).\n\t         */\n            this.dead = true\n            this.grid[y * w + x] = gse.MineClicked\n            this.emit('end', false)\n            return false\n        }\n\n        /*\n         * Otherwise, the player has opened a safe square. Mark it to-do.\n         */\n        const queue = []\n        //this.grid[y * w + x] = -10 /* queue value internal to this func */\n        queue.push({x, y})\n\n        /*\n         * Now go through the queue and open the squares.\n         * Every time one of them turns out to have no\n         * neighbouring mines, we add all its unopened neighbours to\n         * the list as well.\n         *\n         * Different from the best-case(!) O(N²) in the original.\n         */\n        for (let q = 0; q < queue.length; q++) {\n            const {x: xx, y: yy} = queue[q]\n\n            if (this.mines[yy * w + xx])\n                throw new Error('tried to auto-clear a mine')\n\n            let v = 0\n\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (xx + dx >= 0 && xx + dx < w\n                        && yy + dy >= 0 && yy + dy < h\n                        && this.mines[(yy + dy) * w + (xx + dx)])\n                        v++\n                }\n            }\n\n            this.grid[yy * w + xx] = v\n\n            if (v === 0) {\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (xx + dx >= 0 && xx + dx < w\n                            && yy + dy >= 0 && yy + dy < h\n                            && this.grid[(yy + dy) * w + (xx + dx)] === gse.Unknown)\n                            queue.push({x: xx + dx, y: yy + dy})\n                    }\n                }\n            }\n        }\n\n        /*\n         * Finally, scan the grid and see if exactly as many squares\n         * are still covered as there are mines. If so, set the `won'\n         * flag and fill in mine markers on all covered squares.\n         */\n        let nmines = 0, ncovered = 0\n        for (let yy = 0; yy < h; yy++) {\n            for (let xx = 0; xx < w; xx++) {\n                if (this.grid[yy * w + xx] < 0)\n                    ncovered++\n                if (this.mines[yy * w + xx])\n                    nmines++\n            }\n        }\n        if (ncovered < nmines)\n            throw new Error('uncovered a mine without losing?')\n        if (ncovered === nmines) {\n            for (let yy = 0; yy < h; yy++) {\n                for (let xx = 0; xx < w; xx++) {\n                    if (this.grid[yy * w + xx] < 0)\n                        this.grid[yy * w + xx] = gse.Flag\n                }\n            }\n            this.won = true\n            this.emit('end', true)\n            return false\n        }\n\n        return true\n    }\n}\n","import {GridStateEnum as gse} from 'common'\nimport {GameState} from './engine'\n\n/** Game window class, containing controls separated from rules. */\nexport class GameWindow {\n    /**\n     * @param root HTMLElement - root element to bind game field\n     * @param state GameState - game state object to render\n     * @param indicators Array<HTMLElement> - auxiliary indicators\n     * @param [active] - Whether to assign event listeners, or just display state\n     */\n    constructor(root, state, indicators, active = true) {\n        this.init(root, state, indicators, active)\n\n        // TODO make these removeable for cleanup\n        root.addEventListener('mousedown', this.onmousedown.bind(this))\n        root.addEventListener('mouseup', this.onmouseup.bind(this))\n        root.addEventListener('mousemove', this.onmousemove.bind(this))\n        root.addEventListener('mouseleave', () => {\n            this._x_last = null\n            this._y_last = null\n            this.redraw_anim()\n        })\n        root.addEventListener('contextmenu', e => e.preventDefault())\n        document.addEventListener('keypress', this.onkeypress.bind(this))\n        indicators[1].addEventListener('click', () => this.reset())\n    }\n    init(root, state, indicators, active = true) {\n        this.root = root || this.root\n        this.state = state || this.state\n        this.active = active\n        this._grid = []\n\n        this.state.on('start', this.onstart.bind(this))\n        this.state.on('end', this.onend.bind(this))\n\n        while (this.root.firstChild)\n            this.root.removeChild(this.root.firstChild)\n        for (let h = 0; h < state.h; h++) {\n            const row = document.createElement('div')\n            row.className = 'row'\n            for (let w = 0; w < state.w; w++) {\n                const tile = document.createElement('div')\n                tile.className = 'tile closed'\n                tile.dataset.coord = '' + w + 'x' + h\n                this._grid[h * state.w + w] = tile\n                row.appendChild(tile)\n            }\n            this.root.appendChild(row)\n        }\n\n        this.indicator_flags = indicators ? indicators[0] : this.indicator_flags\n        this.indicator_flags.classList.add('indicator', 'counter')\n        this._flags_remain = null\n        this.indicator_yellow = indicators ? indicators[1] : this.indicator_yellow\n        this.indicator_yellow.classList.add('indicator', 'yellow', 'happy')\n        this.indicator_clock = indicators ? indicators[2] : this.indicator_clock\n        this.indicator_clock.classList.add('indicator', 'counter')\n        this.time_start = null\n        this.time_stop = null\n\n        this._chord_last = null\n        this._x_last = null\n        this._y_last = null\n        this._draw_queue = []\n        this._anim_queue = []\n\n        requestAnimationFrame(() => {\n            this.indicator_flags.textContent = '!!!'\n            this.indicator_clock.textContent = '!!!'\n        })\n    }\n    reset() {\n        this.init(null, new GameState(this.state.h, this.state.w, this.state.n), null)\n    }\n    destroy() {\n        // FIXME not removable\n        /*this.root.removeEventListener('mousedown', this.mousedown)\n        this.root.removeEventListener('mouseup', this.mouseup)\n        this.root.removeEventListener('mousemove', this.mousemove)*/\n        this.root = null\n        this.state = null\n        this._grid = null\n        this.time_start = null // kills the tick loop\n    }\n\n    onstart() {\n        this.time_start = Date.now()\n        this._flags_remain = this.state.n\n        requestAnimationFrame(() => this.tick())\n    }\n\n    onend(win) {\n        this.time_stop = Date.now()\n        if (win) {\n            // full reveal, flag remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i] && this.state.grid[i] === gse.Unknown)\n                    this.state.grid[i] = gse.Flag\n            }\n        } else {\n            // full reveal, show remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i]) {\n                    if (this.state.grid[i] === gse.Unknown)\n                        this.state.grid[i] = gse.MineRevealed\n                } else if (this.state.grid[i] === gse.Flag) {\n                    this.state.grid[i] = gse.WrongFlag\n                }\n            }\n        }\n        requestAnimationFrame(() => {\n            this.indicator_yellow.classList.remove('surprise', 'happy')\n            this.indicator_yellow.classList.add(win ? 'cool' : 'dead')\n            this.redraw_full()\n        })\n    }\n    \n    onmousedown(e) {\n        if (!this.active)\n            return\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n\n        if (e.button === 2 && e.buttons === 2 || e.button === 0 && e.ctrlKey) {\n            // right button (or left+ctrl), triggers early\n            this._flag(x, y)\n        } else if (e.button === 0 && e.buttons === 1) {\n            // anim click\n            requestAnimationFrame(() => {\n                if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n                    this._grid[y * this.state.w + x].className = 'tile open'\n                    this._anim_queue.push(y * this.state.w + x)\n                }\n                this.indicator_yellow.classList.replace('happy', 'surprise')\n            })\n        } else if (e.button === 2 && (e.buttons & 1) || e.button === 0 && (e.buttons & 2)) {\n            this._chord_last = null\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (x + dx >= 0 && x + dx < w\n                            && y + dy >= 0 && y + dy < h\n                            && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                            this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                            this._anim_queue.push((y + dy) * w + (x + dx))\n                        }\n                    }\n                }\n            })\n        }\n\n        e.preventDefault()\n    }\n\n    onmouseup(e) {\n        if (!this.active)\n            return\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n        const i = y * this.state.w + x\n\n        if (e.button === 0 && (e.buttons & 2) || e.button === 2 && (e.buttons & 1) || e.button === 1) {\n            // left+right button or middle button\n            this._chord(x, y)\n            if (!(this.state.won || this.state.dead)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.classList.remove('surprise', 'dead', 'cool')\n                    this.indicator_yellow.classList.add('happy')\n                    this.redraw_anim()\n                })\n            }\n        } else if (e.button === 0 && !e.ctrlKey && !this._chord_last) {\n            // left button\n            if (this._open(x, y)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.classList.remove('surprise', 'dead', 'cool')\n                    this.indicator_yellow.classList.add('happy')\n                    this.redraw_anim()\n                })\n            }\n        }\n\n        // log last click if multiple buttons pressed for chord\n        // compatible with 1.5 click strategy, but not in other direction\n        if ((e.buttons & 1) && e.button === 2)\n            this._chord_last = true\n        else\n            this._chord_last = null\n        e.preventDefault()\n    }\n\n    onmousemove(e) {\n        if (!this.active)\n            return\n        if (e.path[0].className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.path[0].dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n        if (this._x_last === x && this._y_last === y)\n            return\n        this._x_last = x\n        this._y_last = y\n\n        if (e.buttons !== 0 && !this._chord_last) {\n            // Animate squares on press and hold etc.\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                this.redraw_anim()\n                if ((e.buttons & 3) === 3) {\n                    for (let dx = -1; dx <= +1; dx++) {\n                        for (let dy = -1; dy <= +1; dy++) {\n                            if (x + dx >= 0 && x + dx < w\n                                && y + dy >= 0 && y + dy < h\n                                && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                                this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                                this._anim_queue.push((y + dy) * w + (x + dx))\n                            }\n                        }\n                    }\n                } else if (e.buttons & 1) {\n                    if (this.state.grid[y * w + x] === gse.Unknown) {\n                        this._grid[y * w + x].className = 'tile open'\n                        this._anim_queue.push(y * w + x)\n                    }\n                }\n            })\n        }\n    }\n\n    onkeypress(e) {\n        if (!this.active)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        if (e.code === 'Space' && this._x_last != null && this._y_last != null) {\n            const i = this._y_last * this.state.w + this._x_last\n            if (this.state.grid[i] === gse.Unknown || this.state.grid[i] === gse.Flag)\n                this._flag(this._x_last, this._y_last)\n            else if (1 <= this.state.grid[i] && this.state.grid[i] <= 8)\n                this._chord(this._x_last, this._y_last)\n            e.preventDefault()\n        }\n    }\n\n    redraw_full() {\n        //this.tick()\n        for (let y = 0; y < this.state.h; y++) {\n            for (let x = 0; x < this.state.w; x++)\n                this.redraw(y * this.state.w + x)\n        }\n    }\n\n    redraw_anim() {\n        for (let i of this._anim_queue)\n            this.redraw(i)\n    }\n\n    redraw(i) {\n        switch (this.state.grid[i]) {\n        case gse.Unknown:\n            this._grid[i].className = 'tile closed'\n            break\n        case gse.Flag:\n            this._grid[i].className = 'tile closed flag'\n            break\n        case gse.MineRevealed:\n            this._grid[i].className = 'tile closed mine'\n            break\n        case gse.MineClicked:\n            this._grid[i].className = 'tile open red mine'\n            break\n        case gse.WrongFlag:\n            this._grid[i].className = 'tile closed nomine'\n            break\n        default:\n            this._grid[i].className = 'tile open n' + this.state.grid[i]\n            break\n        }\n    }\n\n    tick() {\n        const dt = (this.time_stop || Date.now()) - this.time_start\n        // MS sweeper starts clock at 1\n        this.indicator_clock.textContent = ('' + (~~(dt / 1000) + 1)).padStart(3, '0')\n        if (this.time_stop != null)\n            this.indicator_clock.setAttribute('title', `${~~(dt / 60000)}:${(dt / 1000) % 60}`)\n\n        //this.indicator_flags = this.state.grid.reduce((a, v) => a - (v === gse.Flag), this.state.n)\n        this.indicator_flags.textContent = ('' + this._flags_remain).padStart(3, '0')\n\n        for (const i of this._draw_queue)\n            this.redraw(i)\n\n        if (this.time_stop == null && this.time_start != null)\n            requestAnimationFrame(() => this.tick())\n    }\n\n    _open(x, y) {\n        if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n            const rv = this.state.open(x, y)\n            requestAnimationFrame(() => this.redraw_full())\n            return rv\n        }\n        return true\n    }\n\n    _flag(x, y) {\n        const i = y * this.state.w + x\n        if (this.time_start == null)\n            return\n        if (this.state.grid[i] === gse.Unknown) {\n            this.state.grid[i] = gse.Flag\n            this._draw_queue.push(i)\n            this._flags_remain -= 1\n        } else if (this.state.grid[i] === gse.Flag) {\n            this.state.grid[i] = gse.Unknown\n            this._draw_queue.push(i)\n            this._flags_remain += 1\n        }\n    }\n\n    _chord(x, y) {\n        const w = this.state.w, h = this.state.h\n        const i = y * w + x\n        if (this.time_start == null || !(1 <= this.state.grid[i] && this.state.grid[i] <= 8))\n            return\n\n        let v = 0\n        for (let dx = -1; dx <= +1; dx++) {\n            for (let dy = -1; dy <= +1; dy++) {\n                if (x + dx >= 0 && x + dx < w\n                    && y + dy >= 0 && y + dy < h\n                    && this.state.grid[(y + dy) * w + (x + dx)] === gse.Flag)\n                    v++\n            }\n        }\n\n        if (v === this.state.grid[i]) {\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (x + dx >= 0 && x + dx < w\n                        && y + dy >= 0 && y + dy < h\n                        && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown)\n                        this.state.open(x + dx, y + dy)\n                }\n            }\n        }\n\n        requestAnimationFrame(() => this.redraw_full())\n    }\n}\n","import xor4096 from '../lib/xor4096'\nimport {Solver} from 'solver'\n\n/**\n * Interface for classes that generate minefields\n *\n * @interface MinefieldGenerator\n */\n/**\n * Generate a new minefield with the given parameters.\n *\n * @function\n * @static\n * @name MinefieldGenerator#generate\n * @param {number} height Height of minefield.\n * @param {number} width - Width of minefield.\n * @param {number} mines - Number of mines.\n * @param {number} x - First click x-coordinate (to avoid immediate mine).\n * @param {number} y - First click y-coordinate (to avoid immediate mine).\n * @param {RNG | string | number} [seed] - Seed for generating minefield.\n * @returns {Array<number>} An array containing the minefield.\n */\n\n/**\n * Generates classic MS minefields.\n * Based on Simon Tatham's https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (mines > (width * height - 9))\n            throw new Error('too many mines for grid size')\n        const ret = memset(0, width * height)\n        const rng = (seed == null || seed.uint32_range == null) ? xor4096(seed) : seed\n\n        /*\n\t     * Start by placing n mines, none of which is at x,y or within\n\t     * one square of it.\n\t     */\n        const tmp = memset(0, width * height)\n\n        /*\n\t     * Write down the list of possible mine locations.\n\t     */\n        let k = 0\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (Math.abs(i - y) > 1 || Math.abs(j - x) > 1)\n                    tmp[k++] = i * width + j\n            }\n        }\n\n        /*\n         * Now pick n off the list at random.\n         */\n        let nn = mines\n        while (nn-- > 0) {\n            const i = rng.uint32_range(k)\n            ret[tmp[i]] = 1\n            tmp[i] = tmp[--k]\n        }\n\n        return ret\n    }\n}\n\n/**\n * Generates fair minefields without guessing, using Simon Tathams solver.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class FairGenerator extends ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (width <= 2 || height <= 2)\n            throw new Error('grid dimensions must be at least 3x3')\n        const rng = typeof seed !== 'object' ? xor4096(seed) : seed\n\n        let ret, success, ntries = 0\n        do {\n            success = false\n            ntries++\n\n            ret = super.generate(height, width, mines, x, y, rng)\n\n            /*\n\t         * Now set up a results grid to run the solver in, and a\n\t         * context for the solver to open squares. Then run the solver\n\t         * repeatedly; if the number of perturb steps ever goes up or\n\t         * it ever returns -1, give up completely.\n             */\n            const solver = new Solver(\n                ret, width, height, mines, x, y, rng, ntries > 100)\n            let solveret, prevret = -2 // FIXME tf is going on with prevret\n            for (;;) {\n                solver.state = memset(-2, width * height)\n                solver.state[y * width + x] = solver.open(x, y)\n                if (solver.state[y * width + x] !== 0)\n                    throw new Error('Generation broken, first square not empty')\n                solveret = solver.solve()\n                if (solveret < 0 || (prevret >= 0 && solveret >= prevret)) {\n                    success = false\n                    break\n                } else if (solveret === 0) {\n                    success = true\n                    break\n                }\n            }\n        } while (!success)\n\n        return ret\n    }\n}\n\nfunction memset(n, len) {\n    const ret = []\n    for (let i = 0; i < len; i++)\n        ret[i] = n\n    return ret\n}\n","import dragable from '../lib/dragable'\nimport {GameState} from 'engine'\nimport {GameWindow} from 'gameui'\n\n// TODO Make this a real application\n\nconst DIFFICULTIES = {\n    beg: {h: 9, w: 9, n: 10},\n    int: {h: 16, w: 16, n: 40},\n    exp: {h: 16, w: 30, n: 99},\n    ext: {h: 24, w: 30, n: 199},\n}\n\nclass Settings {\n    constructor(root, cb, initial) {\n        this.root = root\n        this.cb = cb\n        this.v = initial\n\n        document.getElementById('settings').addEventListener('click', this.click.bind(this))\n        document.getElementById('settings-container').addEventListener('change', this.change.bind(this))\n\n        this.update(initial)\n    }\n\n    click(e) {\n        if (e.target.name === 'mode') {\n            this.v.mode = e.target.value\n        } else if (e.target.name === 'difficulty') {\n            this.v.difficulty = e.target.value\n            if (e.target.value !== 'cus') {\n                Object.assign(this.v, DIFFICULTIES[e.target.value])\n                document.getElementById('sinput-h').value = this.v.h\n                document.getElementById('sinput-w').value = this.v.w\n                document.getElementById('sinput-n').value = this.v.n\n            }\n        } else {\n            switch (e.target.id) {\n            case 'sinput-ok':\n                this.cb(this.v)\n                // fallthrough\n            case 'sinput-cancel':\n                this.close()\n                break\n            }\n        }\n    }\n\n    change(e) {\n        if (e.target.type !== 'number')\n            return\n        this.v.difficulty = 'cus'\n        document.getElementById('sradio-cus').checked = true\n        switch (e.target.name) {\n        case 'h':\n            this.v.h = parseInt(e.target.value, 10)\n            break\n        case 'w':\n            this.v.w = parseInt(e.target.value, 10)\n            break\n        case 'n':\n            this.v.n = parseInt(e.target.value, 10)\n            break\n        }\n    }\n\n    open(v) {\n        if (v != null)\n            this.update(v)\n        this.root.style.visibility = 'visible'\n    }\n\n    close() {\n        this.root.style.visibility = 'collapse'\n    }\n\n    update() {\n        // TODO maybe make more modularised?\n        document.getElementById('sradio-' + this.v.mode).checked = true\n        document.getElementById('sradio-' + this.v.difficulty).checked = true\n        document.getElementById('sinput-h').value = this.v.h\n        document.getElementById('sinput-w').value = this.v.w\n        document.getElementById('sinput-n').value = this.v.n\n    }\n}\n\n/** Top-level class, managing state */\nexport class Manager {\n    constructor() {\n        this.wmain = document.getElementById('main-game')\n        this.wroom = document.getElementById('w-room')\n        //this.wlist = document.getElementById('w-list')\n        //this.wtop = document.getElementById('w-top')\n\n        this.room_state = {\n            // TODO make this multiplayer stuff work etc\n            admin: true,\n        }\n\n        this.settings = {\n            mode: 'solo',\n            difficulty: 'exp',\n            h: 16,\n            w: 30,\n            n: 99,\n        }\n        this.wsettings = new Settings(\n            document.getElementById('settings'),\n            this.settings_set.bind(this),\n            this.settings\n        )\n        this.bsettings = document.getElementById('settings-button')\n        this.bsettings.addEventListener('click', () => {\n            if (this.room_state.admin)\n                this.wsettings.open(this.settings)\n        })\n        this.label_set()\n\n        this.main = new GameWindow(\n            this.wmain.querySelector('.minefield'),\n            new GameState(this.settings.h, this.settings.w, this.settings.n),\n            this.wmain.getElementsByClassName('indicator')\n        )\n\n        for (let w of document.querySelectorAll('main > .window'))\n            dragable(w.querySelector('.titlebar'), w)\n\n        const mfw = this.wmain.querySelector('.minefield-wrapper')\n        const mf = this.wmain.querySelector('.minefield')\n        /* global addResizeListener */\n        addResizeListener(mfw, function main_resize(e) {\n            const scale = Math.max(Math.min(mfw.offsetWidth / mf.scrollWidth, mfw.offsetHeight / mf.scrollHeight), 1)\n            mf.style.transform = 'translate(-50%, -50%) scale(' + scale + ')'\n        })\n        const scale = Math.min(mfw.offsetWidth / mf.scrollWidth, mfw.offsetHeight / mf.scrollHeight)\n        mf.style.transform = 'translate(-50%, -50%) scale(' + scale + ')'\n    }\n\n    label_set() {\n        // TODO: Show lobby owner name later\n        let l = `${this.settings.h}x${this.settings.w}, ${this.settings.n}`\n        switch (this.settings.mode) {\n        case 'solo':\n            switch (this.settings.difficulty) {\n            case 'beg':\n                l = 'Beginner (' + l + ')'\n                break\n            case 'int':\n                l = 'Intermediate (' + l + ')'\n                break\n            case 'exp':\n                l = 'Expert (' + l + ')'\n                break\n            case 'ext':\n                l = 'Extreme (' + l + ')'\n                break\n            }\n            break\n        }\n        requestAnimationFrame(() => {\n            document.getElementById('room-label').textContent = l\n        })\n    }\n\n    settings_set(v, nonuser = false) {\n        // TODO maybe something more advanced should happen later\n        if (nonuser || this.room_state.admin) {\n            Object.assign(this.settings, v)\n            this.main.init(\n                null,\n                new GameState(this.settings.h, this.settings.w, this.settings.n),\n                null,\n                this.main.active\n            )\n        }\n        this.label_set()\n    }\n}\n\nwindow.manager = new Manager()\n","class Solver {\n    constructor(grid, w, h, n, sx, sy, rng, allow_big_perturbs) {\n        this.grid = grid\n        this.w = w\n        this.h = h\n        this.n = n\n        this.state = []\n        this.sx = sx\n        this.sy = sy\n        this.rng = rng\n        this.allow_big_perturbs = allow_big_perturbs\n    }\n\n    open(x, y) {\n        if (!(x >= 0 && x < this.w && y >= 0 && y < this.h))\n            throw new Error('coordinates out of range')\n        if (this.grid[y * this.w + x])\n            return -1 /* *bang* */\n\n        let n = 0\n        for (let i = -1; i <= +1; i++) {\n            if (x + i < 0 || x + i >= this.w)\n                continue\n            for (let j = -1; j <= +1; j++) {\n                if (y + j < 0 || y + j >= this.h)\n                    continue\n                if (i === 0 && j === 0)\n                    continue\n                if (this.grid[(y + j) * this.w + (x + i)])\n                    n++\n            }\n        }\n\n        return n\n    }\n\n    solve() {\n        return 0 // TODO FIXME\n    }\n}\n\nexport {Solver}\n"]}