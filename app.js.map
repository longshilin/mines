{"version":3,"sources":["app/common.js","app/engine.js","app/generator.js","app/main.js","app/online.js","app/solver.js","app/wchat.js","app/wgame.js","app/wrecords.js","app/wsettings.js"],"names":["djb2","colorstr","sizef","labelf","GridStateEnum","Object","freeze","Question","Unknown","Flag","N0","N1","N2","N3","N4","N5","N6","N7","N8","MineRevealed","MineClicked","WrongFlag","MinesweeperMode","Solo","Coop","Race","Attack","str","s","MinesweeperDifficulty","Beginner","Intermediate","Expert","Extreme","Custom","DistinctColors","hash","i","length","charCodeAt","settings","H","W","N","l","Difficulty","Mode","GameState","height","width","mines","seed","w","h","n","dead","won","grid","y","x","Error","generate","emit","queue","push","q","xx","yy","v","dx","dy","nmines","ncovered","obj","c","ClassicGenerator","ret","memset","rng","uint32_range","tmp","k","j","Math","abs","nn","solveworker","solveworker_cb","FairGenerator","success","ntries","solver","solveret","prevret","state","open","solve","Promise","Worker","onmessage","e","data","resolve","postMessage","sx","sy","allow_big_perturbs","len","Manager","wmain","document","getElementById","mfield","querySelector","wroom","bsettings","bleave","wsettings","settings_set","bind","addEventListener","server","host","oncommand","label_set","wrecords","wchat","main","Date","now","getElementsByClassName","on","oninit","onend","ongameevent","ongamemouse","querySelectorAll","mfw","parentElement","mf","addResizeListener","scale","max","min","offsetWidth","scrollWidth","offsetHeight","scrollHeight","style","transform","window","RTCPeerConnection","onconnected","alert","online_set","update","records","message","slog","p2p","send","RoomP2P","msg","onp2pjoin","onp2pmessage","onp2pleave","onsignal","Chat","onp2pjoinroom","p2pmouseel","_enable_p2pmouse","username","localStorage","getItem","connect","display","uu","value","setItem","Username","requestAnimationFrame","el","classList","remove","room","Id","found","values","users","u","CurrentRoom","join","peer","move","mkp2psync","rlog","list","firstChild","removeChild","color","p","createElement","add","textContent","dataset","peerid","appendChild","zIndex","title","innerHTML","body","node","console","log","m","JSON","parse","TYPE","box","getBoundingClientRect","left","scrollLeft","top","scrollTop","last","init","time_start","active","redraw_full","_flag","t","Owner","RoomSettings","fromJSON","_flags_remain","UiState","FlagsRemaining","TimeStart","time_stop","TimeStop","tick","Config","cursor","sendall","type","args","nx","ny","win","r","me","Time","lr","stringify","Record","cmd","params","socket","close","closeall","became_host","presences","override","assign","RoomUpdate","Settings","manager","awindow","content","toolbar","okbutton","P2PManager","peers","peers_send","room_to_peers","pc","iceServers","urls","onicecandidate","onnegotiationneeded","oniceconnectionstatechange","ch","createDataChannel","negotiated","id","ordered","onopen","onclose","hasOwnProperty","signalmsg","RoomId","Offer","setRemoteDescription","desc","then","createAnswer","setLocalDescription","answer","Answer","localDescription","catch","error","err","Candidate","addIceCandidate","candidate","createOffer","offer","iceConnectionState","indexOf","splice","Server","Best","Latest","WebSocket","removeItem","Hello","Room","SrvError","UserSync","Partial","Presences","keys","forEach","oldroom","RecordSync","concat","slice","Sender","Solver","ss","sets","todo","nperturbs","std","_dump","done_something","shift","bit","val","ss_add","ss_overlap","newmask","setmunge","mask","newmines","ss_remove","toString","bitcount16","known_squares","s2","swing","s2wing","swc","s2wc","squaresleft","minesleft","nsets","setused","ok","outside","perturb","changes","delta","mine","_strmask","rv","_setcmp","lh","rh","_setindexof_ge","arr","low","high","mid","_addsetsorted","todoi","pos","x1","y1","mask1","x2","y2","mask2","diff","inword","word","ChatToolWindow","chat","el_title","el_list","el_log","el_chat","roomid","path","find","code","startsWith","line","split","toLowerCase","user","un","fontStyle","fontWeight","nodes","n1","n2","presences_clear","GameWindow","root","indicators","onmousedown","onmouseup","onmousemove","sendmousemove","_x_last","_y_last","redraw_anim","preventDefault","onkeypress","reset","event","_grid","onstart","row","className","tile","coord","redraw","indicator_flags","indicator_yellow","indicator_clock","_chord_last","_draw_queue","_anim_queue","target","xy","parseInt","button","buttons","ctrlKey","replace","_chord","_open","pageX","pageY","repeat","dt","padStart","setAttribute","silent","RecordsToolWindow","alltime","local","recent","rr","d","long","tr","DIFFICULTIES","SettingsWindow","cb","initial","click","change","name","checked","visibility"],"mappings":"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","file":"public/app.js","sourcesContent":["/**\n * @readonly\n * @enum {number}\n */\n\n\nexport const GridStateEnum = Object.freeze({\n    Question: -3, // unused\n    Unknown: -2,\n    Flag: -1,\n\n    N0: 0,\n    N1: 1,\n    N2: 2,\n    N3: 3,\n    N4: 4,\n    N5: 5,\n    N6: 6,\n    N7: 7,\n    N8: 8,\n\n    MineRevealed: 64,\n    MineClicked: 65,\n    WrongFlag: 66,\n})\n\n/**\n * @readonly\n * @enum {string}\n */\nexport const MinesweeperMode = Object.freeze({\n    Solo: 'solo',\n    Coop: 'coop',\n    Race: 'race',\n    Attack: 'attack',\n\n    str(s) {\n        switch (s) {\n        case MinesweeperMode.Solo:\n            return 'Solo'\n        case MinesweeperMode.Coop:\n            return 'Co-op'\n        case MinesweeperMode.Race:\n            return 'Race'\n        case MinesweeperMode.Attack:\n            return 'Attack'\n        default:\n            return 'Unknown'\n        }\n    },\n})\n\n/**\n * @readonly\n * @enum {string}\n */\nexport const MinesweeperDifficulty = Object.freeze({\n    Beginner: 'beg',\n    Intermediate: 'int',\n    Expert: 'exp',\n    Extreme: 'ext',\n    Custom: 'cus',\n\n    str(s) {\n        switch (s) {\n        case MinesweeperDifficulty.Beginner:\n            return 'Beginner'\n        case MinesweeperDifficulty.Intermediate:\n            return 'Intermediate'\n        case MinesweeperDifficulty.Expert:\n            return 'Expert'\n        case MinesweeperDifficulty.Extreme:\n            return 'Extreme'\n        default:\n            return 'Custom'\n        }\n    },\n})\n\n/*export const DistinctColors = Object.freeze([\n    '#FF0000',\n    '#FFFF00',\n    '#00EAFF',\n    '#AA00FF',\n    '#FF7F00',\n    '#BFFF00',\n    '#0095FF',\n    '#FF00AA',\n    '#FFD400',\n    '#6AFF00',\n])*/\nexport const DistinctColors = Object.freeze([\n    '#4c1313', '#ffd9bf',\n    '#eef2b6', '#3df2e6',\n    '#293aa6', '#f23dce',\n    '#7f4040', '#99754d',\n    '#3a5916', '#1a6166',\n    '#6c7bd9', '#73004d',\n    '#ffbfbf', '#cc8800',\n    '#7db359', '#40d9ff',\n    '#a099cc', '#e5007a',\n    '#ff2200', '#ffd580',\n    '#00ff00', '#00a2f2',\n    '#853df2', '#664d57',\n    '#f29979', '#735c00',\n    '#86b39e', '#5995b3',\n    '#4d0073', '#ff0044',\n    '#592400', '#807d60',\n    '#00f2a2', '#334766',\n    '#673973', '#d96c89',\n    '#b2622d', '#c2cc33',\n    '#008c5e', '#000a4d',\n    '#ffbffb', '#a60016',\n])\n\nexport function djb2(str) {\n    let hash = 5381\n    let i = str.length\n    while (i--)\n        hash = ((hash << 5) + hash) + str.charCodeAt(i)\n    return hash\n}\n\nexport function colorstr(str) {\n    return DistinctColors[djb2(str) % DistinctColors.length]\n}\n\nexport function sizef(settings) {\n    return `${settings.H}x${settings.W}, ${settings.N}`\n}\n\nexport function labelf(settings) {\n    let l = sizef(settings)\n    if (settings.Difficulty !== MinesweeperDifficulty.Custom)\n        l = `${MinesweeperDifficulty.str(settings.Difficulty)} (${l})`\n    if (settings.Mode !== MinesweeperMode.Solo)\n        l = MinesweeperMode.str(settings.Mode) + ' ' + l\n    return l\n}\n\n/**\n * Valid RNG for minefield generators\n * @interface RNG\n */\n/**\n * Generate random number in [0,max)\n * @function\n * @name RNG#uint32_range\n * @param {number} max - End of range, exclusive.\n * @returns {number} A random integer in the specified range\n */\n","import Emitter from 'component-emitter'\n\nimport {GridStateEnum as gse} from 'common'\nimport {ClassicGenerator} from 'generator'\n//import {FairGenerator} from './generator'\n\n/**\n * Game engine class, containing decoupled game logic.\n *\n * @class\n * @extends Emitter\n * @property {number} w - Width of minefield\n * @property {number} h - Height of minefield\n * @property {number} n - Number of mines\n * @property {RNG | string | number | null} seed - RNG or seed used to create minefield\n * @property {boolean} dead - Player is dead\n * @property {boolean} won - Player has won\n *\n * @property {Array<number>} mines - Map of mine locations. Don't cheat!\n * @property {Array<number>} grid - Game state grid\n */\nexport class GameState extends Emitter {\n    constructor(height = 16, width = 30, mines = 99, seed = null) {\n        super()\n\n        this.w = width\n        this.h = height\n        this.n = mines\n        this.seed = seed\n        this.dead = false\n        this.won = false\n\n        this.mines = null\n        this.grid = []\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++)\n                this.grid[y * width + x] = -2\n        }\n    }\n\n    /**\n     * Uncover a square in the minefield.\n     *\n     * @param x - X coordinate to open, from left\n     * @param y - Y coordinate to open, from top\n     * @returns {boolean} Game is still ongoing\n     */\n    open(x, y) {\n        const w = this.w, h = this.h\n        if (!(0 <= x && x < w) || !(0 <= y && y < h))\n            throw new Error('coordinate(s) out of range')\n\n        if (this.mines == null) {\n            /*\n\t         * We have a preliminary game in which the mine layout\n\t         * hasn't been generated yet. Generate it based on the\n\t         * initial click location.\n\t         */\n            this.mines = ClassicGenerator.generate(h, w, this.n, x, y, this.seed)\n            this.emit('start')\n        }\n\n        if (this.mines[y * w + x]) {\n            /*\n\t         * The player has landed on a mine. Bad luck. Expose the\n\t         * mine that killed them, but not the rest (in case they\n\t         * want to Undo and carry on playing).\n\t         */\n            this.dead = true\n            this.grid[y * w + x] = gse.MineClicked\n            this.emit('end', false)\n            return false\n        }\n\n        /*\n         * Otherwise, the player has opened a safe square. Mark it to-do.\n         */\n        const queue = []\n        //this.grid[y * w + x] = -10 /* queue value internal to this func */\n        queue.push({x, y})\n\n        /*\n         * Now go through the queue and open the squares.\n         * Every time one of them turns out to have no\n         * neighbouring mines, we add all its unopened neighbours to\n         * the list as well.\n         *\n         * Different from the best-case(!) O(N²) in the original.\n         */\n        for (let q = 0; q < queue.length; q++) {\n            const {x: xx, y: yy} = queue[q]\n\n            if (this.mines[yy * w + xx])\n                throw new Error('tried to auto-clear a mine')\n\n            let v = 0\n\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (xx + dx >= 0 && xx + dx < w\n                        && yy + dy >= 0 && yy + dy < h\n                        && this.mines[(yy + dy) * w + (xx + dx)])\n                        v++\n                }\n            }\n\n            this.grid[yy * w + xx] = v\n\n            if (v === 0) {\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (xx + dx >= 0 && xx + dx < w\n                            && yy + dy >= 0 && yy + dy < h\n                            && this.grid[(yy + dy) * w + (xx + dx)] === gse.Unknown)\n                            queue.push({x: xx + dx, y: yy + dy})\n                    }\n                }\n            }\n        }\n\n        /*\n         * Finally, scan the grid and see if exactly as many squares\n         * are still covered as there are mines. If so, set the `won'\n         * flag and fill in mine markers on all covered squares.\n         */\n        let nmines = 0, ncovered = 0\n        for (let yy = 0; yy < h; yy++) {\n            for (let xx = 0; xx < w; xx++) {\n                if (this.grid[yy * w + xx] < 0)\n                    ncovered++\n                if (this.mines[yy * w + xx])\n                    nmines++\n            }\n        }\n        if (ncovered < nmines)\n            throw new Error('uncovered a mine without losing?')\n        if (ncovered === nmines) {\n            for (let yy = 0; yy < h; yy++) {\n                for (let xx = 0; xx < w; xx++) {\n                    if (this.grid[yy * w + xx] < 0)\n                        this.grid[yy * w + xx] = gse.Flag\n                }\n            }\n            this.won = true\n            this.emit('end', true)\n            return false\n        }\n\n        return true\n    }\n\n    toJSON() {\n        return {\n            w: this.w,\n            h: this.h,\n            n: this.n,\n            seed: this.seed,\n            dead: this.dead,\n            won: this.won,\n            mines: this.mines,\n            grid: this.grid,\n        }\n    }\n    static fromJSON(obj) {\n        const c = new this(obj.h, obj.w, obj.n, obj.seed)\n        c.dead = obj.dead\n        c.won = obj.won\n        c.mines = obj.mines\n        c.grid = obj.grid\n        return c\n    }\n}\n","import xor4096 from '../lib/xor4096'\nimport {Solver} from 'solver'\n\n/**\n * Interface for classes that generate minefields\n *\n * @interface MinefieldGenerator\n */\n/**\n * Generate a new minefield with the given parameters.\n *\n * @function\n * @static\n * @name MinefieldGenerator#generate\n * @param {number} height Height of minefield.\n * @param {number} width - Width of minefield.\n * @param {number} mines - Number of mines.\n * @param {number} x - First click x-coordinate (to avoid immediate mine).\n * @param {number} y - First click y-coordinate (to avoid immediate mine).\n * @param {RNG | string | number} [seed] - Seed for generating minefield.\n * @returns {Array<number>} An array containing the minefield.\n */\n\n/**\n * Generates classic MS minefields.\n * Based on Simon Tatham's https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (mines > (width * height - 9))\n            throw new Error('too many mines for grid size')\n        const ret = memset(0, width * height)\n        const rng = (seed == null || seed.uint32_range == null) ? xor4096(seed) : seed\n\n        /*\n\t     * Start by placing n mines, none of which is at x,y or within\n\t     * one square of it.\n\t     */\n        const tmp = memset(0, width * height)\n\n        /*\n\t     * Write down the list of possible mine locations.\n\t     */\n        let k = 0\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (Math.abs(i - y) > 1 || Math.abs(j - x) > 1)\n                    tmp[k++] = i * width + j\n            }\n        }\n\n        /*\n         * Now pick n off the list at random.\n         */\n        let nn = mines\n        while (nn-- > 0) {\n            const i = rng.uint32_range(k)\n            ret[tmp[i]] = 1\n            tmp[i] = tmp[--k]\n        }\n\n        return ret\n    }\n}\n\nlet solveworker = null\nlet solveworker_cb = null\n/**\n * Generates fair minefields without guessing, using Simon Tathams solver.\n *\n * @class\n * @implements {MinefieldGenerator}\n */\nexport class FairGenerator extends ClassicGenerator {\n    static generate(height, width, mines, x, y, seed) {\n        if (width <= 2 || height <= 2)\n            throw new Error('grid dimensions must be at least 3x3')\n        const rng = typeof seed !== 'object' ? xor4096(seed) : seed\n\n        let ret, success, ntries = 0\n        do {\n            success = false\n            ntries++\n\n            ret = super.generate(height, width, mines, x, y, rng)\n\n            /*\n\t         * Now set up a results grid to run the solver in, and a\n\t         * context for the solver to open squares. Then run the solver\n\t         * repeatedly; if the number of perturb steps ever goes up or\n\t         * it ever returns -1, give up completely.\n             */\n            const solver = new Solver(\n                ret, width, height, mines, x, y, rng, ntries > 100)\n            let solveret, prevret = -2 // FIXME tf is going on with prevret\n            for (;;) {\n                solver.state = memset(-2, width * height)\n                solver.state[y * width + x] = solver.open(x, y)\n                if (solver.state[y * width + x] !== 0)\n                    throw new Error('Generation broken, first square not empty')\n                solveret = solver.solve()\n                if (solveret < 0 || (prevret >= 0 && solveret >= prevret)) {\n                    success = false\n                    break\n                } else if (solveret === 0) {\n                    success = true\n                    break\n                }\n            }\n        } while (!success)\n\n        return ret\n    }\n\n    static generate_async(height, width, mines, x, y, seed) {\n        if (width <= 2 || height <= 2)\n            throw new Error('grid dimensions must be at least 3x3')\n        const rng = typeof seed !== 'object' ? xor4096(seed) : seed\n        return new Promise(resolve => {\n            if (solveworker == null) {\n                solveworker = new Worker('solve.worker.js')\n                solveworker.onmessage = e => {\n                    if (solveworker_cb != null)\n                        solveworker_cb(e.data)\n                }\n            }\n\n            let ret\n            solveworker_cb = solveret => {\n                if (solveret === 0) {\n                    solveworker_cb = null\n                    resolve(ret)\n                } else {\n                    ret = super.generate(height, width, mines, x, y, rng)\n                    solveworker.postMessage({\n                        grid: ret, w: width, h: height, n: mines, sx: x, sy: y, rng, allow_big_perturbs: false,\n                    })\n                }\n            }\n\n            solveworker_cb(-1)\n        })\n    }\n}\n\nfunction memset(n, len) {\n    const ret = []\n    for (let i = 0; i < len; i++)\n        ret[i] = n\n    return ret\n}\n","import dragable from '../lib/dragable'\nimport {GameState} from 'engine'\nimport {P2PManager, Server} from 'online'\n\nimport {GameWindow} from 'wgame'\nimport RecordsToolWindow from 'wrecords'\nimport SettingsWindow from 'wsettings'\n\nimport {colorstr, labelf, MinesweeperDifficulty as MSDifficulty, MinesweeperMode as MSMode} from './common'\nimport ChatToolWindow from 'wchat'\n\n/** Top-level class, managing state */\nexport class Manager {\n    constructor() {\n        this.wmain = document.getElementById('main-game')\n        this.mfield = this.wmain.querySelector('.minefield')\n        this.wroom = document.getElementById('w-room')\n        this.bsettings = document.getElementById('settings-button')\n        this.bleave = document.getElementById('leave-button')\n\n        /** @type {RoomSettings} */\n        this.settings = {\n            Mode: MSMode.Solo,\n            Difficulty: MSDifficulty.Expert,\n            H: 16,\n            W: 30,\n            N: 99,\n        }\n        this.wsettings = new SettingsWindow(\n            document.getElementById('settings'),\n            this.settings_set.bind(this),\n            this.settings\n        )\n        this.bsettings.addEventListener('click', () => {\n            if (this.server.host)\n                this.wsettings.open(this.settings)\n        })\n        this.bleave.addEventListener('click', () => {\n            this.oncommand('part')\n        })\n        this.label_set()\n\n        this.wrecords = new RecordsToolWindow(\n            document.getElementById('top-alltime'),\n            document.getElementById('top-local'),\n            document.getElementById('recentrecordslist')\n        )\n\n        this.wchat = new ChatToolWindow(\n            document.querySelector('#w-list .titlebar'),\n            document.getElementById('userlist'),\n            document.getElementById('log'),\n            document.getElementById('chatinput')\n        )\n\n        this.main = new GameWindow(\n            this.mfield,\n            new GameState(this.settings.H, this.settings.W, this.settings.N, Date.now()),\n            this.wmain.getElementsByClassName('indicator')\n        )\n        this.main.\n            on('init', this.oninit.bind(this)).\n            on('end', this.onend.bind(this)).\n            on('open', this.ongameevent.bind(this, 'open')).\n            on('flag', this.ongameevent.bind(this, 'flag')).\n            on('mouse', this.ongamemouse.bind(this))\n\n        for (const w of document.querySelectorAll('main > .window'))\n            dragable(w.querySelector('.titlebar'), w)\n\n        const mfw = this.mfield.parentElement\n        const mf = this.mfield\n        /* global addResizeListener */\n        addResizeListener(mfw, () => {\n            const scale = Math.max(Math.min(mfw.offsetWidth / mf.scrollWidth, mfw.offsetHeight / mf.scrollHeight), 1)\n            mf.style.transform = 'translate(-50%, -50%) scale(' + scale + ')'\n        })\n        const scale = Math.min(mfw.offsetWidth / mf.scrollWidth, mfw.offsetHeight / mf.scrollHeight)\n        mf.style.transform = 'translate(-50%, -50%) scale(' + scale + ')'\n\n        if (window.RTCPeerConnection != null) {\n            this.server = new Server()\n            this.server.on('connected', this.onconnected.bind(this)).\n                on('error', alert).\n                on('users', this.online_set.bind(this)).\n                on('records', () => this.wrecords.update(this.server.records)).\n                on('chat', this.wchat.message.bind(this.wchat)).\n                on('broadcast', this.wchat.slog.bind(this.wchat))\n            this.p2p = new P2PManager()\n            this.p2p.on('signal', msg => this.server.send({RoomP2P: msg})).\n                on('join', this.onp2pjoin.bind(this)).\n                on('message', this.onp2pmessage.bind(this)).\n                on('leave', this.onp2pleave.bind(this))\n            this.server.on('signal', this.p2p.onsignal.bind(this.p2p))\n            this.wchat.\n                on('chat', msg => this.server.send({Chat: msg})).\n                on('command', this.oncommand.bind(this)).\n                on('roomclick', this.onp2pjoinroom.bind(this))\n            this.p2pmouseel = []\n            this._enable_p2pmouse = true\n            const username = localStorage.getItem('username')\n            if (username != null) {\n                this.server.connect(username, this.settings)\n            } else {\n                document.getElementById('signin').style.display = 'block'\n                document.querySelector('#signin .button').addEventListener('click', () => {\n                    const uu = document.querySelector('#signin input').value\n                    this.server.connect(uu, this.settings)\n                })\n            }\n        }\n    }\n\n    onconnected(data) {\n        localStorage.setItem('username', data.Username)\n        this.label_set()\n        // TODO update other data?\n        requestAnimationFrame(() => {\n            document.getElementById('signin').style.display = 'none'\n            for (const el of document.querySelectorAll('.online-only'))\n                el.classList.remove('online-only')\n        })\n    }\n    onp2pjoinroom(room) {\n        if (this.server.room.Id === room) {\n            this.wchat.slog('Already in room.')\n            return true\n        }\n        let found = false\n        for (const u of Object.values(this.server.users)) {\n            if (u.CurrentRoom.Id !== room)\n                continue\n            this.p2p.join(u.Username, room)\n            found = true\n        }\n        return found\n    }\n\n    onp2pjoin(room, peer, move) {\n        if (this.server.host)\n            this.p2p.send(peer, this.mkp2psync())\n\n        if (!move)\n            this.wchat.rlog(`${peer} joined room.`)\n        else\n            this.wchat.rlog(`Joined room ${room}.`)\n\n        // ui stuff\n        const list = this.wroom.querySelector('.listui')\n        this.bleave.style.display = 'inline-block'\n        if (move) {\n            while (list.firstChild)\n                list.removeChild(list.firstChild)\n            this.bsettings.style.display = 'none'\n        }\n        const color = colorstr(peer)\n        const p = document.createElement('div')\n        p.classList.add('list-entry')\n        p.textContent = peer\n        p.dataset.peerid = peer\n        p.style.color = color\n        list.appendChild(p)\n\n        const c = document.createElement('div')\n        c.classList.add('cursor')\n        c.style.display = 'none'\n        c.style.color = color\n        c.style.zIndex = '2'\n        c.title = peer\n        c.innerHTML = '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120 120\" xml:space=\"preserve\"><path fill=\"inherit\" d=\"M24.252,0.143l71.828,67.04l-34.716,2.994l19.753,43.695l-13.168,5.984L48.794,75.563L24.252,98.908V0.143\"/></svg>'\n        this.p2pmouseel[peer] = c\n        document.body.appendChild(c)\n    }\n\n    onp2pleave(room, peer) {\n        this.wchat.rlog(`${peer} left room.`)\n        // ui stuff\n        const list = this.wroom.querySelector('.listui')\n        const node = list.querySelector(`.list-entry[data-peerid=\"${peer}\"]`)\n        if (node)\n            list.removeChild(node)\n        document.body.removeChild(this.p2pmouseel[peer])\n        delete this.p2pmouseel[peer]\n    }\n\n    onp2pmessage(room, peer, msg) {\n        console.log('message', room, peer, msg)\n        const m = JSON.parse(msg)\n        switch (m.TYPE) {\n        case 'mouse':\n            if (m.x === -1 && m.y === -1) {\n                this.p2pmouseel[peer].style.display = 'none'\n                break\n            }\n            this.p2pmouseel[peer].style.display = 'block'\n            const box = this.mfield.getBoundingClientRect()\n            this.p2pmouseel[peer].style.left\n                = m.x * box.width - this.mfield.scrollLeft + box.left + 'px'\n            this.p2pmouseel[peer].style.top\n                = m.y * box.height - this.mfield.scrollTop + box.top + 'px'\n            break\n        case 'init':\n            // TODO this needs work for real multiplayer, not just spectate\n            if (this.server.host && this.settings.Mode !== MSMode.Solo) {\n                const last = this.settings\n                // TODO race needs to open a square first\n                this.main.init(null, new GameState(last.H, last.W, last.N, Date.now()), null, true)\n            }\n            this.wchat.rlog(`${peer} reset the game.`)\n            break\n        case 'open':\n            if (this.server.host && this.settings.Mode === MSMode.Solo)\n                return\n            if (this.settings.Mode === MSMode.Race) {\n                if (this.main.time_start == null)\n                    this.main.active = true\n                else\n                    return\n            }\n            this.main.state.open(m.x, m.y)\n            if (this.main.state.dead)\n                this.wchat.rlog(`BANG! ${peer} hit a mine.`)\n            requestAnimationFrame(() => this.main.redraw_full())\n            // TODO this needs work for modes with multiple fields\n            break\n        case 'flag':\n            if (this.server.host && this.settings.Mode === MSMode.Solo || this.settings.Mode === MSMode.Race)\n                return\n            this.main._flag(m.x, m.y, true)\n            // TODO this needs work for modes with multiple fields\n            break\n        case 'end':\n            if (!this.settings.Mode === MSMode.Race)\n                break\n            this.main.onend(false)\n            this.wchat.rlog(`${peer} wins the race with a time of ${m.t / 1000} s!`)\n            break\n        case 'sync':\n            if (peer !== this.server.room.Owner)\n                return\n            this.settings = m.RoomSettings\n            // TODO active check needs to handle multiple fields\n            this.main.init(null, GameState.fromJSON(m.GameState), null,\n                this.settings.Mode !== MSMode.Coop ? this.server.host : true, false)\n            this.main._flags_remain = m.UiState.FlagsRemaining\n            this.main.time_start = m.UiState.TimeStart\n            this.main.time_stop = m.UiState.TimeStop\n            if (m.UiState.TimeStart != null)\n                requestAnimationFrame(() => this.main.tick())\n            this.label_set()\n            // fallthrough\n        case 'config':\n            const c = m.Config\n            if (c.cursor != null && c.cursor !== this._enable_p2pmouse) {\n                this.wchat.rlog(`Host ${c.cursor ? 'enabled' : 'disabled'} cursors.`)\n                this._enable_p2pmouse = c.cursor\n                this.p2p.sendall(this.server.room.Id, {TYPE: 'mouse', x: -1, y: -1})\n            }\n            break\n        }\n    }\n\n    mkp2psync() {\n        return {\n            TYPE: 'sync',\n            RoomSettings: this.settings,\n            GameState: this.main.state,\n            UiState: {\n                FlagsRemaining: this.main._flags_remain,\n                TimeStart: this.main.time_start,\n                TimeStop: this.main.time_stop,\n            },\n            Config: {\n                cursor: this._enable_p2pmouse,\n            },\n        }\n    }\n\n    ongameevent(type, x, y, ...args) {\n        // TODO maybe a bit more advanced later, e.g. block if race\n        console.log(type, x, y, ...args)\n        this.p2p.sendall(this.server.room.Id, {TYPE: type, x, y})\n    }\n    ongamemouse(state, x, y) {\n        if (!this._enable_p2pmouse)\n            return\n        if ((!this.server.host && this.server.room.Mode === MSMode.Solo) || this.server.room.Mode === MSMode.Race)\n            return\n        switch (state) {\n        case 'move':\n            const box = this.mfield.getBoundingClientRect()\n            const nx = (x - box.left + this.mfield.scrollLeft) / box.width\n            const ny = (y - box.top + this.mfield.scrollTop) / box.height\n            this.p2p.sendall(this.server.room.Id, {TYPE: 'mouse', x: nx, y: ny})\n            break\n        case 'leave':\n            this.p2p.sendall(this.server.room.Id, {TYPE: 'mouse', x: -1, y: -1})\n            break\n        }\n    }\n\n    oninit(state) {\n        if (this.server.host)\n            this.p2p.sendall(this.server.room.Id, this.mkp2psync())\n        else\n            this.p2p.sendall(this.server.room.Id, {TYPE: 'init'})\n    }\n\n    onend(win) {\n        // TODO maybe send a message out\n        if (!win)\n            return\n        const r = {\n            Username: this.server.me,\n            Mode: this.settings.Mode,\n            Difficulty: this.settings.Difficulty,\n            Time: this.main.time_stop - this.main.time_start,\n        }\n        if (r.Mode === MSMode.Solo && r.Difficulty !== MSDifficulty.Custom) {\n            const lr = JSON.parse(localStorage.getItem('record-' + r.Difficulty))\n            if (lr == null || r.Time < lr.Time) {\n                localStorage.setItem('record-' + r.Difficulty, JSON.stringify(r))\n                alert(`A new personal record!\\nTime taken: ${r.Time / 1000} s`)\n                this.wchat.rlog(`A new personal record! Time taken: ${r.Time / 1000} s`)\n            }\n        } else if (r.Mode === MSMode.Race) {\n            this.p2p.sendall(this.server.room.Id, {TYPE: 'end', t: r.Time})\n        }\n        alert(`You win!\\nTime taken: ${r.Time / 1000} s`)\n        this.wchat.rlog(`You win!\\nTime taken: ${r.Time / 1000} s`)\n        if (this.server.host)\n            this.server.send({Record: r})\n    }\n\n    oncommand(cmd, params) {\n        switch (cmd) {\n        case 'connect':\n            this.server.connect(!params ? this.server.me : params, this.settings)\n            break\n        case 'disconnect':\n            this.server.socket.close()\n            break\n        case 'join':\n            if (!this.onp2pjoinroom(params))\n                this.wchat.slog('Could not find room.')\n            break\n        case 'part':\n            this.p2p.closeall(this.server.room.Id)\n            this.server.send({RoomP2P: {Username: null}})\n            this.bleave.style.display = 'none'\n            this.wchat.rlog('Disconnecting from other users...')\n            break\n        case 'setcursor':\n            if (!this.server.host) {\n                this.wchat.slog('Insufficient permissions (host-only command).')\n                return\n            }\n            if (params === 'off' || params === 'false') {\n                this._enable_p2pmouse = false\n                this.p2p.sendall(this.server.room.Id, {TYPE: 'config', Config: {cursor: false}})\n                this.wchat.rlog('CONFIG: Cursors disabled.')\n                this.p2p.sendall(this.server.room.Id, {TYPE: 'mouse', x: -1, y: -1})\n            } else if (params === 'on' || params === 'true') {\n                this._enable_p2pmouse = true\n                this.p2p.sendall(this.server.room.Id, {TYPE: 'config', Config: {cursor: true}})\n                this.wchat.rlog('CONFIG: Cursors enabled.')\n            }\n            break\n        default:\n            this.wchat.slog('Unknown command. Try /HELP.')\n        }\n    }\n\n    label_set() {\n        const l = labelf(this.settings)\n        requestAnimationFrame(() => {\n            document.getElementById('room-label').textContent = l\n            document.getElementById('room-owner').textContent\n                = (this.server.room != null) ? this.server.room.Owner : ''\n        })\n    }\n\n    online_set(data, became_host) {\n        if (became_host) {\n            // TODO maybe log this\n            alert('The previous host disconnected.\\nYou are now the host.')\n            this.wchat.rlog('The previous host disconnected. You are now the host.')\n        }\n        if (this.server.host) {\n            this.main.active = true\n            this.bsettings.style.display = 'inline-block'\n        }\n        this.wchat.presences(this.server.users)\n        requestAnimationFrame(() => this.label_set())\n    }\n\n    settings_set(v, override = false) {\n        // TODO maybe something more advanced should happen later\n        if (override || this.server.host) {\n            Object.assign(this.settings, v)\n            this.main.init(\n                null,\n                new GameState(this.settings.H, this.settings.W, this.settings.N, Date.now()),\n                null,\n                this.main.active\n            )\n            this.server.send({RoomUpdate: {Settings: this.settings}})\n        }\n        this.label_set()\n    }\n}\n\nwindow.manager = new Manager()\n\nfunction alert(msg) {\n    const main = document.querySelector('main')\n    const awindow = document.createElement('div')\n    awindow.classList.add('alert', 'window')\n    const title = document.createElement('div')\n    title.classList.add('titlebar')\n    title.textContent = 'Alert'\n    awindow.appendChild(title)\n    const content = document.createElement('div')\n    content.textContent = msg\n    awindow.appendChild(content)\n    const toolbar = document.createElement('div')\n    toolbar.classList.add('toolbar-bottom')\n    const okbutton = document.createElement('a')\n    okbutton.classList.add('button', 'alert-ok')\n    okbutton.textContent = '\\xa0\\xa0OK\\xa0\\xa0'\n    okbutton.addEventListener('click', () => {\n        main.removeChild(awindow)\n    })\n    toolbar.appendChild(okbutton)\n    awindow.appendChild(toolbar)\n    requestAnimationFrame(() => main.appendChild(awindow))\n}\n","import Emitter from 'component-emitter'\n\nexport class P2PManager extends Emitter {\n    constructor() {\n        super()\n\n        this.peers = {}\n        this.peers_send = {}\n        this.room_to_peers = {}\n    }\n\n    join(peer, room, move = true) {\n        console.log('join()', peer, room)\n        const pc = new RTCPeerConnection({\n            iceServers: [{\n                urls: 'stun://stun.l.google.com:19302',\n            }],\n        })\n        this.peers[peer] = pc\n        this.room_to_peers[room] = (this.room_to_peers[room] || [])\n        this.room_to_peers[room].push(peer)\n\n        pc.onicecandidate = this.onicecandidate.bind(this, peer, room)\n        pc.onnegotiationneeded = this.onnegotiationneeded.bind(this, peer, room)\n        pc.oniceconnectionstatechange = this.oniceconnectionstatechange.bind(this, peer, room)\n\n        const ch = pc.createDataChannel(room, {negotiated: true, id: 0, ordered: true})\n        ch.onopen = () => {\n            this.peers_send[peer] = msg => ch.send(msg)\n            this.emit('join', room, peer, move)\n        }\n        ch.onmessage = e => {\n            this.emit('message', room, peer, e.data)\n        }\n        ch.onclose = () => {\n            // Close if the RTC connection didn't do it itself\n            if (this.peers.hasOwnProperty(peer))\n                this.peers[peer].close()\n        }\n    }\n\n    send(peer, msg) {\n        this.peers_send[peer](JSON.stringify(msg))\n    }\n    sendall(room, msg) {\n        if (!this.room_to_peers.hasOwnProperty(room))\n            return\n        for (const peer of this.room_to_peers[room])\n            this.send(peer, msg)\n    }\n\n    close(peer) {\n        this.peers[peer].close()\n    }\n    closeall(room) {\n        if (!this.room_to_peers.hasOwnProperty(room))\n            return\n        for (const peer of this.room_to_peers[room])\n            this.close(peer)\n    }\n\n    onsignal(signalmsg) {\n        console.log('signal()', signalmsg.Username, signalmsg.RoomId)\n        const peer = signalmsg.Username\n        if (this.peers[peer] == null)\n            this.join(peer, signalmsg.RoomId, false)\n        const pc = this.peers[peer]\n\n        if (signalmsg.Offer) {\n            pc.setRemoteDescription(JSON.parse(signalmsg.Offer).desc).\n                then(() => pc.createAnswer()).\n                then(answer => pc.setLocalDescription(answer)).\n                then(() => {\n                    this.emit('signal',\n                        {Username: peer, RoomId: signalmsg.RoomId, Answer: JSON.stringify({desc: pc.localDescription})})\n                }).\n                catch(err => console.error(err))\n        } else if (signalmsg.Answer) {\n            pc.setRemoteDescription(JSON.parse(signalmsg.Answer).desc).catch(err => console.error(err))\n        } else if (signalmsg.Candidate) {\n            pc.addIceCandidate(JSON.parse(signalmsg.Candidate).candidate).catch(err => console.error(err))\n        }\n    }\n\n    onicecandidate(peer, room, e) {\n        console.log('onicecandidate()', peer, room, e)\n        if (e.candidate)\n            this.emit('signal', {Username: peer, RoomId: room, Candidate: JSON.stringify({candidate: e.candidate})})\n    }\n\n    onnegotiationneeded(peer, room, e) {\n        console.log('onnegotiationneeded()', peer, room, e)\n        this.peers[peer].createOffer().\n            then(offer => this.peers[peer].setLocalDescription(offer)).\n            then(() => {\n                this.emit('signal', {Username: peer, RoomId: room,\n                    Offer: JSON.stringify({desc: this.peers[peer].localDescription})})\n            }).\n            catch(err => console.error(err))\n    }\n\n    oniceconnectionstatechange(peer, room, e) {\n        console.log('oniceconnectionstatechange()', peer, room, e)\n        if (!this.peers.hasOwnProperty(peer))\n            return\n        // eslint-disable-next-line max-len\n        if (this.peers[peer].iceConnectionState === 'disconnected' || this.peers[peer].iceConnectionState === 'closed') {\n            console.log('leave', room, peer)\n            this.emit('leave', room, peer)\n            this.peers[peer].close()\n\n            delete this.peers_send[peer]\n            delete this.peers[peer]\n            const i = this.room_to_peers[room].indexOf(peer)\n            if (i !== -1) {\n                this.room_to_peers[room].splice(i, 1)\n                if (this.room_to_peers[room].length === 0)\n                    delete this.room_to_peers[room]\n            }\n        }\n    }\n}\n\nexport class Server extends Emitter {\n    constructor() {\n        super()\n\n        this.socket = null\n\n        this.me = null\n        /** @type ?Room */\n        this.room = null\n        this.host = true\n        this.users = {}\n        this.records = {Best: {}, Latest: []}\n    }\n\n    connect(username, settings) {\n        this.socket = new WebSocket('wss://rsid.gq/mines') // wss://mines.rsid.gq/server\n        this.socket.addEventListener('close', e => {\n            localStorage.removeItem('username')\n            console.error(e)\n            this.emit('error', 'Connection failed.')\n            this.emit('broadcast', 'Lost server connection. Try /CONNECT to reconnect.')\n        })\n        this.socket.addEventListener('open', () => {\n            // TODO maybe other data?\n            this.socket.send(JSON.stringify({\n                Hello: {Username: username, Room: this.room ? this.room : settings},\n            }))\n        })\n        this.socket.addEventListener('message', this.onmessage.bind(this))\n    }\n\n    onmessage(e) {\n        /** @type Message */\n        const data = JSON.parse(e.data)\n        if (data.SrvError != null) {\n            console.error(data.SrvError)\n            this.emit('error', 'Error: ' + data.SrvError)\n            return\n        }\n        if (data.RoomP2P != null)\n            this.emit('signal', data.RoomP2P)\n        if (data.UserSync != null) {\n            if (!data.UserSync.Partial) {\n                this.users = data.UserSync.Presences\n            } else {\n                this.users = Object.assign(this.users, data.UserSync.Presences)\n                Object.keys(this.users).forEach(k => {\n                    if (this.users[k] == null)\n                        delete this.users[k]\n                })\n            }\n            let became_host = false\n            if (this.users.hasOwnProperty(this.me)) {\n                const oldroom = this.room.Id\n                this.room = this.users[this.me].CurrentRoom\n                became_host = !this.host && this.room.Owner === this.me && this.room.Id === oldroom\n                this.host = this.room.Owner === this.me\n                delete this.users[this.me]\n            }\n            this.emit('users', data.UserSync, became_host)\n        }\n        if (data.RecordSync != null) {\n            if (!data.RecordSync.Partial) {\n                this.records = data.RecordSync\n                if (this.records.Latest == null)\n                    this.records.Latest = [] // fix for go returning nil for empty slice\n            } else {\n                this.records.Best = Object.assign(this.records.Best, data.RecordSync.Best)\n                this.records.Latest = (data.RecordSync.Latest || []).concat(this.records.Latest).slice(0, 10)\n            }\n            this.emit('records', data.RecordSync)\n        }\n        if (data.Hello != null) {\n            this.me = data.Hello.Username\n            this.room = data.Hello.Room\n            this.host = true\n            this.emit('connected', data.Hello)\n        }\n        if (data.Chat != null) {\n            if (data.Sender != null)\n                this.emit('chat', data.Sender, data.Chat)\n            else\n                this.emit('broadcast', data.Chat)\n        }\n    }\n\n    /**\n     * Send message to server.\n     * @param {Message} m\n     */\n    send(m) {\n        if (this.socket == null)\n            return\n        delete m.Sender\n        delete m.SrvError\n        this.socket.send(JSON.stringify(m))\n    }\n}\n\n/**\n * @typedef {object} Message\n * @property {?string} SrvError - Server error\n * @property {?string} Chat - Text accompanying event\n * @property {?HelloMessage} Hello\n * @property {?UserSyncMessage} UserSync\n * @property {?RoomUpdateMessage} RoomUpdate\n * @property {?RoomP2PMessage} RoomP2P\n * @property {?RecordMessage} Record\n * @property {?RecordSyncMessage} RecordSync\n */\n/**\n * @typedef {object} HelloMessage\n * @property {string} Username - Username signed in as\n * @property {Room} Room - Newly created room (or from client setting parameters)\n */\n/**\n * @typedef {object} UserSyncMessage\n * @property {Presence[]} Presences - List of presences on server\n * @property {boolean} Partial - Whether this list is partial (update cached)\n */\n/**\n * @typedef {object} RoomUpdateMessage\n * @property {RoomSettings} Settings\n */\n/**\n * @typedef {object} RoomP2PMessage\n * @property {string} Username\n * @property {string} RoomId\n * @property {string} Offer\n * @property {string} Answer\n * @property {string} Candidate\n */\n/**\n * @typedef {object} RecordMessage\n * @property {MinesweeperMode} Mode\n * @property {MinesweeperDifficulty} Difficulty\n * @property {number} Time\n */\n/**\n * @typedef {object} RecordSyncMessage\n * @property {Object.<MinesweeperDifficulty, MSRecord>} Best\n * @property {?MSRecord[]} Latest\n * @property {boolean} Partial - Whether this list is partial (update cached)\n */\n/**\n * @typedef {object} Presence\n * @property {string} Username\n * @property {Room} CurrentRoom\n * TODO?\n */\n/**\n * @typedef {RecordMessage} MSRecord\n * @property {string} Username\n */\n/**\n * @typedef {RoomSettings} Room\n * @property {string} Id\n * @property {string} Owner\n */\n/**\n * @typedef {object} RoomSettings\n * @property {MinesweeperMode} Mode\n * @property {MinesweeperDifficulty} Difficulty\n * @property {number} H - Height of field\n * @property {number} W - Width of field\n * @property {number} N - Number of mines\n */\n","class Solver {\n    constructor(grid, w, h, n, sx, sy, rng, allow_big_perturbs) {\n        this.grid = grid\n        this.w = w\n        this.h = h\n        this.n = n\n        this.state = []\n        this.sx = sx\n        this.sy = sy\n        /** @type {RNG} **/\n        this.rng = rng\n        this.allow_big_perturbs = allow_big_perturbs\n    }\n\n    open(x, y) {\n        if (!(x >= 0 && x < this.w && y >= 0 && y < this.h))\n            throw new Error('coordinates out of range')\n        if (this.grid[y * this.w + x])\n            return -1 /* *bang* */\n\n        let n = 0\n        for (let i = -1; i <= +1; i++) {\n            if (x + i < 0 || x + i >= this.w)\n                continue\n            for (let j = -1; j <= +1; j++) {\n                if (y + j < 0 || y + j >= this.h)\n                    continue\n                if (i === 0 && j === 0)\n                    continue\n                if (this.grid[(y + j) * this.w + (x + i)])\n                    n++\n            }\n        }\n\n        return n\n    }\n\n    solve() {\n        /**\n         * @type {{sets: SolveSet[], todo: SolveSet[]}}\n         */\n        const ss = {\n            sets: [],\n            todo: [],\n        }\n        let nperturbs = 0\n        /*\n         * Set up a list of squares with known contents, so that\n         * we can process them one by one.\n         */\n        const std = []\n\n        /*\n         * Initialise that list with all known squares in the input\n         * grid.\n         */\n        for (let i = 0; i < this.w * this.h; i++) {\n            if (this.state[i] !== -2)\n                std.push(i)\n        }\n\n        /*\n         * Main deductive loop.\n         */\n        for (;;) {\n            console.log(this._dump())\n            let done_something = false\n\n            /*\n             * If there are any known squares on the to-do list, process\n             * them and construct a set for each.\n             */\n            while (std.length > 0) {\n                const i = std.shift()\n                const x = i % this.w\n                const y = ~~(i / this.w)\n                console.log(`known square at ${x},${y} [${this.state[i]}]`)\n\n                if (this.state[i] >= 0) {\n                    console.log('creating set around this square')\n                    /*\n                     * Empty square. Construct the set of non-known squares\n                     * around this one, and determine its mine count.\n                     */\n                    let mines = this.state[i]\n                    let bit = 1, val = 0\n                    for (let dy = -1; dy <= +1; dy++) {\n                        for (let dx = -1; dx <= +1; dx++) {\n                            console.log(`grid ${x + dx},${y + dy} = ${this.state[i + dy * this.w + dx]}`)\n                            if (x + dx < 0 || x + dx >= this.w || y + dy < 0 || y + dy >= this.h)\n                                console.log('skip') // ignore this one\n                            else if (this.state[i + dy * this.w + dx] === -1)\n                                mines--\n                            else if (this.state[i + dy * this.w + dx] === -2)\n                                val |= bit\n                            bit <<= 1\n                        }\n                    }\n                    if (val)\n                        ss_add(ss, x - 1, y - 1, val, mines)\n                }\n\n                /*\n                 * Now, whether the square is empty or full, we must\n                 * find any set which contains it and replace it with\n                 * one which does not.\n                 */\n                console.log(`finding sets containing known square ${x},${y}`)\n                const list = ss_overlap(ss, x, y, 1)\n\n                for (const s of list) {\n                    /*\n                     * Compute the mask for this set minus the\n                     * newly known square.\n                     */\n                    const newmask = setmunge(s, {x, y, mask: 1}, true)\n\n                    /*\n                     * Compute the new mine count.\n                     */\n                    const newmines = s.mines - (this.state[i] === -1)\n\n                    /*\n                     * Insert the new set into the collection,\n                     * unless it's been whittled right down to\n                     * nothing.\n                     */\n                    if (newmask)\n                        ss_add(ss, s.x, s.y, newmask, newmines)\n\n                    ss_remove(ss, s)\n                }\n\n                /*\n                 * Marking a fresh square as known certainly counts as\n                 * doing something.\n                 */\n                done_something = true\n            }\n\n            /*\n             * Now pick a set off the to-do list and attempt deductions\n             * based on it.\n             */\n            if (ss.todo.length > 0) {\n                const s = ss.todo.shift()\n                console.log(`set to do: ${s.x},${s.y} ${s.mask.toString(2)} ${s.mines}`)\n\n                /*\n                 * Firstly, see if this set has a mine count of zero or\n                 * of its own cardinality.\n                 */\n                if (s.mines === 0 || s.mines === bitcount16(s.mask)) {\n                    /*\n                     * If so, we can immediately mark all the squares\n                     * in the set as known.\n                     */\n                    console.log('easy')\n                    this.known_squares(std, s.x, s.y, s.mask, s.mines !== 0)\n\n                    /*\n                     * Having done that, we need do nothing further\n                     * with this set; marking all the squares in it as\n                     * known will eventually eliminate it, and will\n                     * also permit further deductions about anything\n                     * that overlaps it.\n                     */\n                    continue\n                }\n\n                /*\n                 * Failing that, we now search through all the sets\n                 * which overlap this one.\n                 */\n                for (const s2 of ss_overlap(ss, s.x, s.y, s.mask)) {\n                    /*\n                     * Find the non-overlapping parts s2-s and s-s2,\n                     * and their cardinalities.\n                     *\n                     * I'm going to refer to these parts as `wings'\n                     * surrounding the central part common to both\n                     * sets. The `s wing' is s-s2; the `s2 wing' is\n                     * s2-s.\n                     */\n                    const swing = setmunge(s, s2, true)\n                    const s2wing = setmunge(s2, s, true)\n                    const swc = bitcount16(swing)\n                    const s2wc = bitcount16(s2wing)\n\n                    /*\n                     * If one set has more mines than the other, and\n                     * the number of extra mines is equal to the\n                     * cardinality of that set's wing, then we can mark\n                     * every square in the wing as a known mine, and\n                     * every square in the other wing as known clear.\n                     */\n                    if (swc === s.mines - s2.mines || s2wc === s2.mines - s.mines) {\n                        this.known_squares(std, s.x, s.y, swing, swc === s.mines - s2.mines)\n                        this.known_squares(std, s2.x, s2.y, s2wing, s2wc === s2.mines - s.mines)\n                        continue\n                    }\n\n                    /*\n                     * Failing that, see if one set is a subset of the\n                     * other. If so, we can divide up the mine count of\n                     * the larger set between the smaller set and its\n                     * complement, even if neither smaller set ends up\n                     * being immediately clearable.\n                     */\n                    if (swc === 0 && s2wc !== 0) {\n                        /* s is a subset of s2. */\n                        if (s2.mines <= s.mines)\n                            throw new Error('s should be a subset of s2')\n                        ss_add(ss, s2.x, s2.y, s2wing, s2.mines - s.mines)\n                    } else if (s2wc === 0 && swc !== 0) {\n                        /* s2 is a subset of s */\n                        if (s.mines <= s2.mines)\n                            throw new Error('s2 should be a subset of s')\n                        ss_add(ss, s.x, s.y, swing, s.mines - s2.mines)\n                    }\n                }\n\n                /*\n                 * In this situation we have definitely done,\n                 * _something_, even if it's only reducing the size of\n                 * or to-do list.\n                 */\n                done_something = true\n            } else if (this.n >= 0) {\n                /*\n                 * We have nothing left on our to-do list, which means\n                 * all localised deductions have failed. Our next step\n                 * is to resort to global deduction based on the total\n                 * mine count. This is computationally expensive\n                 * compared to any of the above deductions, which is\n                 * why we only ever do it when all else fails, so that\n                 * hopefully it won't have to happen too often.\n                 *\n                 * If you pass n<0 into this solver, that informs it\n                 * that you do not know the total mine count, so it\n                 * won't even attempt these deductions.\n                 */\n\n                /*\n                 * Start by scanning the current grid state to work out\n                 * how many unknown square we still have, and how many\n                 * mines are to be placed in them.\n                 */\n                let squaresleft = 0, minesleft = this.n\n                for (let i = 0; i < this.w * this.h; i++) {\n                    if (this.state[i] === -1)\n                        minesleft--\n                    else if (this.state[i] === -2)\n                        squaresleft++\n                }\n\n                console.log(`global deduction time: squaresleft=${squaresleft} minesleft=${minesleft}`)\n                console.log(this._dump())\n\n                /*\n                 * If there _are_ no unknown square, we have actually\n                 * finished.\n                 */\n                if (squaresleft === 0) {\n                    if (minesleft !== 0)\n                        throw new Error('no squares left but mines remaining')\n                    break\n                }\n\n                /*\n                 * First really simple case: if there are no more mines\n                 * left, or if there are exactly as many mines left as\n                 * squares to play them in, then it's all easy.\n                 */\n                if (minesleft === 0 || minesleft === squaresleft) {\n                    for (let y = 0; y < this.h; y++) {\n                        for (let x = 0; x < this.w; x++) {\n                            if (this.state[y * this.w + x] === -2)\n                                this.known_squares(std, x, y, 1, minesleft !== 0)\n                        }\n                    }\n                }\n\n\n                /*\n                 * Failing that, we have to do some _real_ work.\n                 * Ideally what we do here is to try every single\n                 * combination of the currently available sets, in an\n                 * attempt to find a disjoint union (i.e. a set of\n                 * squares with a known mine count between them) such\n                 * that the remaining unknown squares _not_ contained\n                 * in that union either contain no mines or are all\n                 * mines.\n                 *\n                 * Actually enumerating all 2^n possibilities will get\n                 * a bit slow for large n, so I artificially cap this\n                 * recursion at n=10 to avoid too much pain.\n                 */\n                const nsets = ss.sets.length\n                if (nsets <= 10) {\n                    /*\n                     * Doing this with actual recursive function calls\n                     * would get fiddly because a load of local\n                     * variables from this function would have to be\n                     * passed down through the recursion. So instead\n                     * I'm going to use a virtual recursion within this\n                     * function. The way this works is:\n                     *\n                     *  - we have an array `setused', such that\n                     *    setused[n] is false or true depending on whether set\n                     *    n is currently in the union we are\n                     *    considering.\n                     *\n                     *  - we have a value `cursor' which indicates how\n                     *    much of `setused' we have so far filled in.\n                     *    It's conceptually the recursion depth.\n                     *\n                     * We begin by setting `cursor' to zero. Then:\n                     *\n                     *  - if cursor can advance, we advance it by one.\n                     *    We set the value in `setused' that it went\n                     *    past to 1 if that set is disjoint from\n                     *    anything else currently in `setused', or to 0\n                     *    otherwise.\n                     *\n                     *  - If cursor cannot advance because it has\n                     *    reached the end of the setused list, then we\n                     *    have a maximal disjoint union. Check to see\n                     *    whether its mine count has any useful\n                     *    properties. If so, mark all the squares not\n                     *    in the union as known and terminate.\n                     *\n                     *  - If cursor has reached the end of setused and\n                     *    the algorithm _hasn't_ terminated, back\n                     *    cursor up to the nearest 1, turn it into a 0\n                     *    and advance cursor just past it.\n                     *\n                     *  - If we attempt to back up to the nearest 1 and\n                     *    there isn't one at all, then we have gone\n                     *    through all disjoint unions of sets in the\n                     *    list and none of them has been helpful, so we\n                     *    give up.\n                     */\n                    const setused = []\n                    let cursor = 0\n                    for (;;) {\n                        if (cursor < nsets) {\n                            let ok = true\n\n                            /* See if any existing set overlaps this one. */\n                            for (let i = 0; i < cursor; i++) {\n                                if (setused[i] && setmunge(ss.sets[cursor], ss.sets[i], false)) {\n                                    ok = false\n                                    break\n                                }\n                            }\n\n                            if (ok) {\n                                /*\n                                 * We're adding this set to our union,\n                                 * so adjust minesleft and squaresleft\n                                 * appropriately.\n                                 */\n                                minesleft -= ss.sets[cursor].mines\n                                squaresleft -= bitcount16(ss.sets[cursor].mask)\n                            }\n\n                            setused[cursor++] = ok\n                        } else {\n                            console.log(`trying a set combination with ${squaresleft} ${minesleft}`)\n\n                            /*\n                             * We've reached the end. See if we've got\n                             * anything interesting.\n                             */\n                            if (squaresleft > 0 && (minesleft === 0 || minesleft === squaresleft)) {\n                                /*\n                                 * We have! There is at least one\n                                 * square not contained within the set\n                                 * union we've just found, and we can\n                                 * deduce that either all such squares\n                                 * are mines or all are not (depending\n                                 * on whether minesleft == 0). So now all\n                                 * we have to do is actually go through\n                                 * the grid, find those squares, and\n                                 * mark them.\n                                 */\n                                for (let i = 0; i < this.w * this.h; i++) {\n                                    if (this.state[i] === -2) {\n                                        let outside = true\n                                        const x = i % this.w\n                                        const y = ~~(i / this.w)\n                                        for (let j = 0; j < nsets; j++) {\n                                            if (setused[j] && setmunge(ss.sets[j], {x, y, mask: 1}, false)) {\n                                                outside = false\n                                                break\n                                            }\n                                        }\n                                        if (outside)\n                                            this.known_squares(std, x, y, 1, minesleft !== 0)\n                                    }\n                                }\n\n                                done_something = true\n                                break /* return to main deductive loop */\n                            }\n\n                            /*\n                             * If we reach here, then this union hasn't\n                             * done us any good, so move on to the\n                             * next. Backtrack cursor to the nearest true,\n                             * change it to a false and continue.\n                             */\n                            while (!setused[cursor] && cursor >= 0)\n                                cursor--\n\n                            if (cursor >= 0) {\n                                if (!setused[cursor])\n                                    throw new Error('backtrack did not go to a true')\n                                /*\n                                 * We're removing this set from our\n                                 * union, so re-increment minesleft and\n                                 * squaresleft.\n                                 */\n                                minesleft += ss.sets[cursor].mines\n                                squaresleft += bitcount16(ss.sets[cursor].mask)\n\n                                setused[cursor++] = false\n                            } else {\n                                /*\n                                 * We've backtracked all they way to the\n                                 * start without finding a single 1,\n                                 * which means that our virtual\n                                 * recursion is complete and nothing\n                                 * helped.\n                                 */\n                                break\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (done_something)\n                continue\n\n            console.log(`solver ran out of steam, ret=${nperturbs}, grid:`)\n            console.log(this._dump())\n            for (const s of ss.sets)\n                console.log(`remaining set: ${s.x},${s.y} ${s.mask.toString(2)} ${s.mines}`)\n\n            /*\n             * Now we really are at our wits' end as far as solving\n             * this grid goes. Our only remaining option is to call\n             * a perturb function and ask it to modify the grid to\n             * make it easier.\n             */\n            if (this.perturb) {\n                let ret = null\n                nperturbs++\n\n                /*\n                 * Choose a set at random from the current selection,\n                 * and ask the perturb function to either fill or empty\n                 * it.\n                 *\n                 * If we have no sets at all, we must give up.\n                 */\n                if (ss.sets.length === 0) {\n                    console.log('perturbing on entire unknown set')\n                    ret = this.perturb(0, 0, 0)\n                } else {\n                    const s = ss.sets[this.rng.uint32_range(ss.sets.length)]\n                    console.log(`perturbing on set ${s.x},${s.y} ${s.mask.toString(2)}`)\n                    ret = this.perturb(s.x, s.y, s.mask)\n                }\n\n                if (ret != null) {\n                    if (ret.n <= 0)\n                        throw new Error('ret should have been null')\n\n                    /*\n                     * A number of squares have been fiddled with, and\n                     * the returned structure tells us which. Adjust\n                     * the mine count in any set which overlaps one of\n                     * those squares, and put them back on the to-do\n                     * list, Also, if the square itself is marked as a\n                     * known non-mine, put it back on the squares-to-do\n                     * list.\n                     */\n                    for (let i = 0; i < ret.n; i++) {\n                        // eslint-disable-next-line max-len\n                        console.log(`perturbation ${ret.changes[i].delta > 0 ? 'added' : 'removed'} mine at ${ret.changes[i].x},${ret.changes[i].y}`)\n\n                        if (ret.changes[i].delta < 0 && this.state[ret.changes[i].y * this.w + ret.changes[i].x] !== -2)\n                            std.push(ret.changes[i].y * this.w + ret.changes[i].x)\n\n                        for (const s of ss_overlap(ss, ret.changes[i].x, ret.changes[i].y, 1))\n                            ss.todo.push(s)\n                    }\n\n                    console.log('state after perturbation:')\n                    console.log(this._dump())\n                    for (const s of ss.sets)\n                        console.log(`remaining set: ${s.x},${s.y} ${s.mask.toString(2)} ${s.mines}`)\n\n                    continue\n                }\n            }\n\n            /*\n             * If we get here, even that didn't work, so we give up entirely.\n             */\n            break\n        }\n\n        /*\n         * See if we've got any unknown squares left.\n         */\n        for (let i = 0; i < this.w * this.h; i++) {\n            if (this.state[i] === -2) {\n                nperturbs = -1\n                break\n            }\n        }\n\n        return nperturbs\n    }\n\n    known_squares(std, x, y, mask, mine) {\n        console.log(`adding known squares ${x},${y} ${mine} ${_strmask(mask)}`)\n        let bit = 1\n        for (let yy = 0; yy < 3; yy++) {\n            for (let xx = 0; xx < 3; xx++) {\n                if (mask & bit) {\n                    const i = (y + yy) * this.w + (x + xx)\n\n                    /*\n                     * It's possible that this square is _already_\n                     * known, in which case we don't try to add it to\n                     * the list twice.\n                     */\n                    if (this.state[i] === -2) {\n                        if (mine) {\n                            this.state[i] = -1 // flag\n                            console.log(`flagged ${x + xx},${y + yy}`)\n                        } else {\n                            this.state[i] = this.open(x + xx, y + yy)\n                            if (this.state[i] === -1)\n                                throw new Error('*bang*')\n                            console.log(`opened ${x + xx},${y + yy} [${this.state[i]}]`)\n                        }\n                        std.push(i)\n                    }\n                }\n                bit <<= 1\n            }\n        }\n    }\n\n    //perturb() {}\n\n    _dump() {\n        let rv = ''\n        for (let y = 0; y < this.h; y++) {\n            for (let x = 0; x < this.w; x++) {\n                const v = this.state[y * this.w + x]\n                if (v === -1)\n                    rv += '*'\n                else if (v === -2)\n                    rv += '?'\n                else if (v === 0)\n                    rv += '-'\n                else\n                    rv += '' + v\n            }\n            rv += '\\n'\n        }\n        return rv\n    }\n}\n\n/* eslint-disable no-param-reassign */\n/**\n * @private\n * @typedef {object} SolveSet\n * @property {number} x\n * @property {number} y\n * @property {number} mask\n * @property {number} mines\n */\n/**\n * @param lh {SolveSet}\n * @param rh {SolveSet}\n * @private\n */\nfunction _setcmp(lh, rh) {\n    if (lh.y < rh.y)\n        return -1\n    else if (lh.y > rh.y)\n        return +1\n    else if (lh.x < rh.x)\n        return -1\n    else if (lh.x > rh.x)\n        return +1\n    else if (lh.mask < rh.mask)\n        return -1\n    else if (lh.mask > rh.mask)\n        return +1\n    return 0\n}\n\nfunction _setindexof_ge(arr, val) {\n    let low = 0, high = arr.length\n    while (low < high) {\n        const mid = (low + high) >>> 1\n        if (_setcmp(arr[mid], val) === -1)\n            low = mid + 1\n        else\n            high = mid\n    }\n    return low\n}\n\nfunction _addsetsorted(arr, val) {\n    const i = _setindexof_ge(arr, val)\n    if (arr[i] != null && _setcmp(arr[i], val) === 0)\n        return false\n    arr.splice(i, 0, val)\n    return true\n}\n\nfunction ss_add(ss, x, y, mask, mines) {\n    if (mask === 0)\n        throw new Error('ss_add assertion failed')\n    while (!(mask & (1 | 8 | 64))) {\n        mask >>= 1\n        x++\n    }\n    while (!(mask & (1 | 2 | 4))) {\n        mask >>= 3\n        y++\n    }\n    const s = {x, y, mask, mines}\n    if (!_addsetsorted(ss.sets, s))\n        return\n    console.log(`added set ${x},${y} ${mask.toString(2)} ${mines}`)\n    ss.todo.push(s)\n}\n\nfunction ss_remove(ss, s) {\n    console.log(`removing set ${s.x},${s.y} ${s.mask.toString(2)}`)\n    const todoi = ss.todo.indexOf(s)\n    if (todoi > -1)\n        ss.todo.splice(todoi, 1)\n    const i = ss.sets.indexOf(s)\n    if (i === -1)\n        throw new Error('tried to remove non-existent set')\n    ss.sets.splice(i, 1)\n}\n\nfunction ss_overlap(ss, x, y, mask) {\n    const ret = []\n    for (let xx = x - 3; xx < x + 3; xx++) {\n        for (let yy = y - 3; yy < y + 3; yy++) {\n            /*\n             * Find the first set with these top left coordinates.\n             */\n            let pos = _setindexof_ge(ss.sets, {x: xx, y: yy, mask: 0})\n            if (ss.sets[pos] != null) {\n                let s = ss.sets[pos]\n                while (s != null && s.x === xx && s.y === yy) {\n                    /*\n                     * This set potentially overlaps the input one.\n                     * Compute the intersection to see if they\n                     * really overlap, and add it to the list if so.\n                     */\n                    if (setmunge({x, y, mask}, s, false)) {\n                        /*\n                         * There's an overlap.\n                         */\n                        ret.push(s)\n                    }\n\n                    s = ss.sets[++pos]\n                }\n            }\n        }\n    }\n    return ret\n}\n\n/*\n * Take two input sets, in the form (x,y,mask). Munge the first by\n * taking either its intersection with the second or its difference\n * with the second. Return the new mask part of the first set.\n */\nfunction setmunge({x: x1, y: y1, mask: mask1}, {x: x2, y: y2, mask: mask2}, diff = false) {\n    /*\n     * Adjust the second set so that it has the same x,y\n     * coordinates as the first\n     */\n    if (Math.abs(x2 - x1) >= 3 || Math.abs(y2 - y1) >= 3) {\n        mask2 = 0\n    } else {\n        while (x2 > x1) {\n            mask2 &= ~(4 | 32 | 256)\n            mask2 <<= 1\n            x2--\n        }\n        while (x2 < x1) {\n            mask2 &= ~(1 | 8 | 64)\n            mask2 >>= 1\n            x2++\n        }\n        while (y2 > y1) {\n            mask2 &= ~(64 | 128 | 256)\n            mask2 <<= 3\n            y2--\n        }\n        while (y2 < y1) {\n            mask2 &= ~(1 | 2 | 4)\n            mask2 >>= 3\n            y2++\n        }\n    }\n\n    /*\n     * Invert the second set if diff is set (we're after A &~ B\n     * rather than A & B).\n     */\n    if (diff)\n        mask2 ^= 511\n\n    return mask1 & mask2\n}\n\n/*\n * Count the bits in a word. Only needs to cope with 16 bits.\n */\nfunction bitcount16(inword) {\n    let word = inword\n\n    word = ((word & 0xAAAA) >>> 1) + (word & 0x5555)\n    word = ((word & 0xCCCC) >>> 2) + (word & 0x3333)\n    word = ((word & 0xF0F0) >>> 4) + (word & 0x0F0F)\n    word = ((word & 0xFF00) >>> 8) + (word & 0x00FF)\n\n    return word\n}\n\nfunction _strmask(mask) {\n    return ('\\n'\n        + ((mask & 1) ? '.' : 'X')\n        + ((mask & 2) ? '.' : 'X')\n        + ((mask & 4) ? '.' : 'X') + '\\n'\n        + ((mask & 8) ? '.' : 'X')\n        + ((mask & 16) ? '.' : 'X')\n        + ((mask & 32) ? '.' : 'X') + '\\n'\n        + ((mask & 64) ? '.' : 'X')\n        + ((mask & 128) ? '.' : 'X')\n        + ((mask & 256) ? '.' : 'X') + '\\n'\n    )\n}\n/* eslint-enable no-param-reassign */\n\nexport {Solver}\n","import Emitter from 'component-emitter'\nimport {colorstr, labelf} from 'common'\n\nexport default class ChatToolWindow extends Emitter {\n    constructor(title, list, log, chat) {\n        super()\n        this.el_title = title\n        this.el_list = list\n        this.el_log = log\n        this.el_chat = chat\n\n        // TODO listen for enter, emit 'chat' or 'command'\n        this.el_list.addEventListener('click', e => {\n            const roomid = e.path.find(el => el.dataset != null && el.dataset.roomid != null)\n            if (!roomid)\n                return\n            this.emit('roomclick', roomid.dataset.roomid)\n        })\n\n        this.el_chat.addEventListener('keyup', e => {\n            if (e.code === 'Enter' && this.el_chat.value !== '') {\n                if (this.el_chat.value.startsWith('/'))\n                    this.oncommand(this.el_chat.value)\n                else\n                    this.emit('chat', this.el_chat.value)\n                this.el_chat.value = ''\n            }\n        })\n    }\n\n    oncommand(str) {\n        const line = str.split(' ')\n        const cmd = line.shift().slice(1).toLowerCase()\n        const params = line.join(' ')\n        switch (cmd) {\n        case 'help':\n            this.slog('Available commands: /CLEAR /CONNECT /DISCONNECT /HELP /JOIN /PART /SETCURSOR')\n            break\n        case 'clear':\n            while (this.el_log.firstChild)\n                this.el_log.removeChild(this.el_log.firstChild)\n            break\n        default:\n            this.emit('command', cmd, params)\n        }\n    }\n\n    message(user, msg) {\n        const un = user.Username\n        const node = document.createElement('div')\n        node.textContent = msg\n        node.innerHTML = `&lt;<span style=\"color:${colorstr(un)}\">${un}</span>&gt;&nbsp;` + node.innerHTML\n        this.el_log.appendChild(node)\n        this.el_log.scrollTop = this.el_log.scrollHeight\n    }\n\n    slog(msg) {\n        const node = document.createElement('div')\n        node.style.color = '#333'\n        node.style.fontStyle = 'italic'\n        node.textContent = msg\n        this.el_log.appendChild(node)\n        this.el_log.scrollTop = this.el_log.scrollHeight\n    }\n\n    rlog(msg) {\n        const node = document.createElement('div')\n        node.style.color = '#333'\n        node.style.fontWeight = '600'\n        node.textContent = msg\n        this.el_log.appendChild(node)\n        this.el_log.scrollTop = this.el_log.scrollHeight\n    }\n\n    presences(users) {\n        // TODO partial updates (param)\n        const nodes = []\n        for (const u of Object.values(users)) {\n            const p = document.createElement('div')\n            p.classList.add('list-entry', 'clickable')\n            const n1 = document.createElement('div')\n            n1.textContent = u.Username\n            n1.style.color = colorstr(u.Username)\n            p.appendChild(n1)\n            const n2 = document.createElement('div')\n            n2.textContent = labelf(u.CurrentRoom)\n            if (u.CurrentRoom.Owner !== u.Username)\n                n2.textContent += ` [${u.CurrentRoom.Owner}]`\n            p.appendChild(n2)\n            p.dataset.roomid = u.CurrentRoom.Id\n            nodes.push(p)\n        }\n        requestAnimationFrame(() => {\n            this.el_title.textContent = `Server (${Object.keys(users).length + 1} online)`\n            this.presences_clear()\n            for (const n of nodes)\n                this.el_list.appendChild(n)\n        })\n    }\n\n    presences_clear() {\n        while (this.el_list.firstChild)\n            this.el_list.removeChild(this.el_list.firstChild)\n    }\n}\n","import Emitter from 'component-emitter'\nimport throttle from 'throttleit'\n\nimport {GridStateEnum as gse} from 'common'\nimport {GameState} from './engine'\n\n/** Game window class, containing controls separated from rules. */\nexport class GameWindow extends Emitter {\n    /**\n     * @param root HTMLElement - root element to bind game field\n     * @param state GameState - game state object to render\n     * @param indicators Array<HTMLElement> - auxiliary indicators\n     * @param [active] - Whether to assign event listeners, or just display state\n     */\n    constructor(root, state, indicators, active = true) {\n        super()\n        this.init(root, state, indicators, active)\n\n        // TODO make these removeable for cleanup\n        root.addEventListener('mousedown', this.onmousedown.bind(this))\n        root.addEventListener('mouseup', this.onmouseup.bind(this))\n        root.addEventListener('mousemove', this.onmousemove.bind(this))\n        root.addEventListener('mousemove', throttle(this.sendmousemove.bind(this), 100))\n        root.addEventListener('mouseleave', () => {\n            this._x_last = null\n            this._y_last = null\n            this.redraw_anim()\n            this.emit('mouse', 'leave', null, null)\n        })\n        root.addEventListener('contextmenu', e => e.preventDefault())\n        document.addEventListener('keypress', this.onkeypress.bind(this))\n        indicators[1].addEventListener('click', () => this.active ? this.reset() : null)\n    }\n    init(root, state, indicators, active = true, event = true) {\n        this.root = root || this.root\n        this.state = state || this.state\n        this.active = active\n        this._grid = []\n\n        this.state.on('start', this.onstart.bind(this))\n        this.state.on('end', this.onend.bind(this))\n\n        while (this.root.firstChild)\n            this.root.removeChild(this.root.firstChild)\n        for (let h = 0; h < state.h; h++) {\n            const row = document.createElement('div')\n            row.className = 'row'\n            for (let w = 0; w < state.w; w++) {\n                const tile = document.createElement('div')\n                tile.dataset.coord = '' + w + 'x' + h\n                this._grid[h * state.w + w] = tile\n                this.redraw(h * state.w + w)\n                row.appendChild(tile)\n            }\n            this.root.appendChild(row)\n        }\n\n        this.indicator_flags = indicators ? indicators[0] : this.indicator_flags\n        this.indicator_flags.classList.add('indicator', 'counter')\n        this._flags_remain = null\n        this.indicator_yellow = indicators ? indicators[1] : this.indicator_yellow\n        this.indicator_yellow.classList.remove('dead', 'surprise', 'cool')\n        this.indicator_yellow.classList.add('indicator', 'yellow', 'happy')\n        this.indicator_clock = indicators ? indicators[2] : this.indicator_clock\n        this.indicator_clock.classList.add('indicator', 'counter')\n        this.time_start = null\n        this.time_stop = null\n\n        this._chord_last = null\n        this._x_last = null\n        this._y_last = null\n        this._draw_queue = []\n        this._anim_queue = []\n\n        this.indicator_flags.textContent = '!!!'\n        this.indicator_clock.textContent = '!!!'\n\n        /**\n         * Game initialise event.\n         *\n         * @event GameWindow#init\n         * @param {GameState} state - The new game state.\n         * */\n        if (event)\n            this.emit('init', this.state)\n    }\n    reset() {\n        this.init(null, new GameState(this.state.h, this.state.w, this.state.n, Date.now()), null)\n    }\n    destroy() {\n        // FIXME not removable\n        /*this.root.removeEventListener('mousedown', this.mousedown)\n        this.root.removeEventListener('mouseup', this.mouseup)\n        this.root.removeEventListener('mousemove', this.mousemove)*/\n        this.root = null\n        this.state = null\n        this._grid = null\n        this.time_start = null // kills the tick loop\n    }\n\n    onstart() {\n        this.time_start = Date.now()\n        this._flags_remain = this.state.n\n        //this.root.style.cursor = 'default'\n        requestAnimationFrame(() => this.tick())\n    }\n\n    onend(win) {\n        this.time_stop = Date.now()\n        this.emit('end', win)\n        if (win) {\n            // full reveal, flag remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i] && this.state.grid[i] === gse.Unknown)\n                    this.state.grid[i] = gse.Flag\n            }\n        } else {\n            // full reveal, show remaining mines\n            for (let i = 0; i < this.state.h * this.state.w; i++) {\n                if (this.state.mines[i]) {\n                    if (this.state.grid[i] === gse.Unknown)\n                        this.state.grid[i] = gse.MineRevealed\n                } else if (this.state.grid[i] === gse.Flag) {\n                    this.state.grid[i] = gse.WrongFlag\n                }\n            }\n        }\n        requestAnimationFrame(() => {\n            this.indicator_yellow.classList.remove('surprise', 'happy')\n            this.indicator_yellow.classList.add(win ? 'cool' : 'dead')\n            this.redraw_full()\n        })\n    }\n    \n    onmousedown(e) {\n        if (!this.active)\n            return\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n\n        if (e.button === 2 && e.buttons === 2 || e.button === 0 && e.ctrlKey) {\n            // right button (or left+ctrl), triggers early\n            this._flag(x, y)\n        } else if (e.button === 0 && e.buttons === 1) {\n            // anim click\n            requestAnimationFrame(() => {\n                if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n                    this._grid[y * this.state.w + x].className = 'tile open'\n                    this._anim_queue.push(y * this.state.w + x)\n                }\n                this.indicator_yellow.classList.replace('happy', 'surprise')\n            })\n        } else if (e.button === 2 && (e.buttons & 1) || e.button === 0 && (e.buttons & 2)) {\n            this._chord_last = null\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                for (let dx = -1; dx <= +1; dx++) {\n                    for (let dy = -1; dy <= +1; dy++) {\n                        if (x + dx >= 0 && x + dx < w\n                            && y + dy >= 0 && y + dy < h\n                            && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                            this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                            this._anim_queue.push((y + dy) * w + (x + dx))\n                        }\n                    }\n                }\n            })\n        }\n\n        e.preventDefault()\n    }\n\n    onmouseup(e) {\n        if (!this.active)\n            return\n        if (e.target.className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.target.dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n\n        if (e.button === 0 && (e.buttons & 2) || e.button === 2 && (e.buttons & 1) || e.button === 1) {\n            // left+right button or middle button\n            this._chord(x, y)\n            if (!(this.state.won || this.state.dead)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.classList.remove('surprise', 'dead', 'cool')\n                    this.indicator_yellow.classList.add('happy')\n                    this.redraw_anim()\n                })\n            }\n        } else if (e.button === 0 && !e.ctrlKey && !this._chord_last) {\n            // left button\n            //if (this.time_start == null)\n            //    this.root.style.cursor = 'progress'\n            if (this._open(x, y)) {\n                requestAnimationFrame(() => {\n                    this.indicator_yellow.classList.remove('surprise', 'dead', 'cool')\n                    this.indicator_yellow.classList.add('happy')\n                    this.redraw_anim()\n                })\n            }\n        }\n\n        // log last click if multiple buttons pressed for chord\n        // compatible with 1.5 click strategy, but not in other direction\n        if ((e.buttons & 1) && e.button === 2)\n            this._chord_last = true\n        else\n            this._chord_last = null\n        e.preventDefault()\n    }\n\n    onmousemove(e) {\n        if (!this.active)\n            return\n        if (e.path[0].className.indexOf('tile') === -1)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        const xy = e.path[0].dataset.coord.split('x')\n        const x = parseInt(xy[0], 10), y = parseInt(xy[1], 10)\n        if (this._x_last === x && this._y_last === y)\n            return\n        this._x_last = x\n        this._y_last = y\n\n        if (e.buttons !== 0 && !this._chord_last) {\n            // Animate squares on press and hold etc.\n            requestAnimationFrame(() => {\n                const w = this.state.w, h = this.state.h\n                this.redraw_anim()\n                if ((e.buttons & 3) === 3) {\n                    for (let dx = -1; dx <= +1; dx++) {\n                        for (let dy = -1; dy <= +1; dy++) {\n                            if (x + dx >= 0 && x + dx < w\n                                && y + dy >= 0 && y + dy < h\n                                && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                                this._grid[(y + dy) * w + (x + dx)].className = 'tile open'\n                                this._anim_queue.push((y + dy) * w + (x + dx))\n                            }\n                        }\n                    }\n                } else if (e.buttons & 1) {\n                    if (this.state.grid[y * w + x] === gse.Unknown) {\n                        this._grid[y * w + x].className = 'tile open'\n                        this._anim_queue.push(y * w + x)\n                    }\n                }\n            })\n        }\n    }\n    sendmousemove(e) {\n        if (this._x_last == null && this._y_last == null)\n            return\n        this.emit('mouse', 'move', e.pageX, e.pageY)\n    }\n\n    onkeypress(e) {\n        if (!this.active)\n            return\n        if (this.state.won || this.state.dead)\n            return\n        if (e.code === 'Space' && this._x_last != null && this._y_last != null && !e.repeat) {\n            const i = this._y_last * this.state.w + this._x_last\n            if (this.state.grid[i] === gse.Unknown || this.state.grid[i] === gse.Flag)\n                this._flag(this._x_last, this._y_last)\n            else if (1 <= this.state.grid[i] && this.state.grid[i] <= 8)\n                this._chord(this._x_last, this._y_last)\n            e.preventDefault()\n        }\n    }\n\n    redraw_full() {\n        //this.tick()\n        for (let y = 0; y < this.state.h; y++) {\n            for (let x = 0; x < this.state.w; x++)\n                this.redraw(y * this.state.w + x)\n        }\n    }\n\n    redraw_anim() {\n        for (const i of this._anim_queue)\n            this.redraw(i)\n    }\n\n    redraw(i) {\n        switch (this.state.grid[i]) {\n        case gse.Unknown:\n            this._grid[i].className = 'tile closed'\n            break\n        case gse.Flag:\n            this._grid[i].className = 'tile closed flag'\n            break\n        case gse.MineRevealed:\n            this._grid[i].className = 'tile closed mine'\n            break\n        case gse.MineClicked:\n            this._grid[i].className = 'tile open red mine'\n            break\n        case gse.WrongFlag:\n            this._grid[i].className = 'tile closed nomine'\n            break\n        default:\n            this._grid[i].className = 'tile open n' + this.state.grid[i]\n            break\n        }\n    }\n\n    tick() {\n        const dt = (this.time_stop || Date.now()) - this.time_start\n        // MS sweeper starts clock at 1\n        this.indicator_clock.textContent = ('' + (~~(dt / 1000) + 1)).padStart(3, '0')\n        if (this.time_stop != null)\n            this.indicator_clock.setAttribute('title', `${~~(dt / 60000)}:${(dt / 1000) % 60}`)\n\n        //this.indicator_flags = this.state.grid.reduce((a, v) => a - (v === gse.Flag), this.state.n)\n        if (this._flags_remain != null) {\n            this.indicator_flags.textContent = ('' + this._flags_remain).padStart(3, '0')\n        } else {\n            this.indicator_clock.textContent = '!!!'\n            this.indicator_flags.textContent = '!!!'\n        }\n\n        for (const i of this._draw_queue)\n            this.redraw(i)\n\n        if (this.time_stop == null && this.time_start != null)\n            requestAnimationFrame(() => this.tick())\n    }\n\n    _open(x, y) {\n        if (this.state.grid[y * this.state.w + x] === gse.Unknown) {\n            const rv = this.state.open(x, y)\n            requestAnimationFrame(() => this.redraw_full())\n            /**\n             * Grid square opened event.\n             *\n             * @event GameWindow#open\n             * @param {number} x - X coordinate of opened square\n             * @param {number} y - Y coordinate of opened square\n             * @param {boolean} ok - Whether the game continues after this open\n             */\n            this.emit('open', x, y, rv)\n            return rv\n        }\n        return true\n    }\n\n    _flag(x, y, silent = false) {\n        const i = y * this.state.w + x\n        if (this.time_start == null)\n            return\n        if (this.state.grid[i] === gse.Unknown) {\n            this.state.grid[i] = gse.Flag\n            this._draw_queue.push(i)\n            this._flags_remain -= 1\n            /**\n             * Grid square flag event.\n             *\n             * @event GameWindow#flag\n             * @param {number} x - X coordinate of flagged square\n             * @param {number} y - Y coordinate of flagged square\n             * @param {number} df - Flag change, 1 for addition and -1 for removal\n             * @param {number} remain - Remaining flags\n             */\n            if (!silent)\n                this.emit('flag', x, y, 1, this._flags_remain)\n        } else if (this.state.grid[i] === gse.Flag) {\n            this.state.grid[i] = gse.Unknown\n            this._draw_queue.push(i)\n            this._flags_remain += 1\n            if (!silent)\n                this.emit('flag', x, y, -1, this._flags_remain)\n        }\n    }\n\n    _chord(x, y) {\n        const w = this.state.w, h = this.state.h\n        const i = y * w + x\n        if (this.time_start == null || !(1 <= this.state.grid[i] && this.state.grid[i] <= 8))\n            return\n\n        let v = 0\n        for (let dx = -1; dx <= +1; dx++) {\n            for (let dy = -1; dy <= +1; dy++) {\n                if (x + dx >= 0 && x + dx < w\n                    && y + dy >= 0 && y + dy < h\n                    && this.state.grid[(y + dy) * w + (x + dx)] === gse.Flag)\n                    v++\n            }\n        }\n\n        if (v === this.state.grid[i]) {\n            for (let dx = -1; dx <= +1; dx++) {\n                for (let dy = -1; dy <= +1; dy++) {\n                    if (x + dx >= 0 && x + dx < w\n                        && y + dy >= 0 && y + dy < h\n                        && this.state.grid[(y + dy) * w + (x + dx)] === gse.Unknown) {\n                        const rv = this.state.open(x + dx, y + dy)\n                        this.emit('open', (x + dx), (y + dy), rv)\n                    }\n                }\n            }\n        }\n\n        requestAnimationFrame(() => this.redraw_full())\n    }\n}\n","import {MinesweeperDifficulty as MSDifficulty, MinesweeperMode as MSMode} from './common'\n\nexport default class RecordsToolWindow {\n    constructor(alltime, local, recent) {\n        this.alltime = alltime\n        this.local = local\n        this.recent = recent\n    }\n\n    /* eslint-disable max-len */\n    update(rr) {\n        // TODO partial updates (param)\n        const alltime = this.alltime\n        while (alltime.firstChild)\n            alltime.removeChild(alltime.firstChild)\n        row(alltime, rr.Best[MSDifficulty.Beginner], MSDifficulty.str(MSDifficulty.Beginner))\n        row(alltime, rr.Best[MSDifficulty.Intermediate], MSDifficulty.str(MSDifficulty.Intermediate))\n        row(alltime, rr.Best[MSDifficulty.Expert], MSDifficulty.str(MSDifficulty.Expert))\n        row(alltime, rr.Best[MSDifficulty.Extreme], MSDifficulty.str(MSDifficulty.Extreme))\n        const local = this.local\n        while (local.firstChild)\n            local.removeChild(local.firstChild)\n        row(local, JSON.parse(localStorage.getItem('record-' + MSDifficulty.Beginner)), MSDifficulty.str(MSDifficulty.Beginner))\n        row(local, JSON.parse(localStorage.getItem('record-' + MSDifficulty.Intermediate)), MSDifficulty.str(MSDifficulty.Intermediate))\n        row(local, JSON.parse(localStorage.getItem('record-' + MSDifficulty.Expert)), MSDifficulty.str(MSDifficulty.Expert))\n        row(local, JSON.parse(localStorage.getItem('record-' + MSDifficulty.Extreme)), MSDifficulty.str(MSDifficulty.Extreme))\n        const recent = this.recent\n        while (recent.firstChild)\n            recent.removeChild(recent.firstChild)\n        for (const r of rr.Latest) {\n            const d = document.createElement('div')\n            d.classList.add('list-entry')\n            d.innerHTML = `<span>${r.Username}</span>&nbsp;<span>${MSMode.str(r.Mode)}, ${MSDifficulty.str(r.Difficulty)}</span>&nbsp;<span>${~~(r.Time / 1000) + 1}</span>` // eslint-disable-line max-len\n            recent.appendChild(d)\n        }\n    }\n    /* eslint-enable max-len */\n}\n\nfunction row(t, r, long) {\n    if (r == null)\n        return\n    const tr = document.createElement('tr')\n    tr.innerHTML = `<td><em>${long}</em></td><td>${r.Username}</td><td>${r.Time / 1000}</td>`\n    t.appendChild(tr)\n}\n","import {MinesweeperDifficulty as MSDifficulty} from './common'\n\nconst DIFFICULTIES = {\n    [MSDifficulty.Beginner]:     {H: 9,  W: 9,  N: 10}, // eslint-disable-line no-multi-spaces\n    [MSDifficulty.Intermediate]: {H: 16, W: 16, N: 40},\n    [MSDifficulty.Expert]:       {H: 16, W: 30, N: 99},\n    [MSDifficulty.Extreme]:      {H: 24, W: 30, N: 199},\n}\n\nexport default class SettingsWindow {\n    constructor(root, cb, initial) {\n        this.root = root\n        this.cb = cb\n        this.v = Object.assign({}, initial)\n\n        document.getElementById('settings').addEventListener('click', this.click.bind(this))\n        document.getElementById('settings-container').addEventListener('change', this.change.bind(this))\n\n        this.update(initial)\n    }\n\n    click(e) {\n        if (e.target.name === 'mode') {\n            this.v.Mode = e.target.value\n        } else if (e.target.name === 'difficulty') {\n            this.v.Difficulty = e.target.value\n            if (e.target.value !== MSDifficulty.Custom) {\n                Object.assign(this.v, DIFFICULTIES[e.target.value])\n                document.getElementById('sinput-h').value = this.v.H\n                document.getElementById('sinput-w').value = this.v.W\n                document.getElementById('sinput-n').value = this.v.N\n            }\n        } else {\n            switch (e.target.id) {\n            case 'sinput-ok':\n                this.cb(this.v)\n                // fallthrough\n            case 'sinput-cancel':\n                this.close()\n                break\n            }\n        }\n    }\n\n    change(e) {\n        if (e.target.type !== 'number')\n            return\n        this.v.Difficulty = MSDifficulty.Custom\n        document.getElementById('sradio-cus').checked = true\n        switch (e.target.name) {\n        case 'h':\n            this.v.H = parseInt(e.target.value, 10)\n            break\n        case 'w':\n            this.v.W = parseInt(e.target.value, 10)\n            break\n        case 'n':\n            this.v.N = parseInt(e.target.value, 10)\n            break\n        }\n    }\n\n    open(v) {\n        if (v != null)\n            this.update(v)\n        this.root.style.visibility = 'visible'\n    }\n\n    close() {\n        this.root.style.visibility = 'collapse'\n    }\n\n    update() {\n        // TODO maybe make more modularised?\n        document.getElementById('sradio-' + this.v.Mode).checked = true\n        document.getElementById('sradio-' + this.v.Difficulty).checked = true\n        document.getElementById('sinput-h').value = this.v.H\n        document.getElementById('sinput-w').value = this.v.W\n        document.getElementById('sinput-n').value = this.v.N\n    }\n}\n"]}